FPP has the ability to both publish status via MQTT as well as receive  commands by subscribing to specific topics.   

Topic Format
---------------------------------------------
{optional prefix}/falcon/player/{hostname}/{sub_topic}

The {optional prefix} is defined in the advanced settings
The {hostname} is defined in the Network Settings tab and should be different for each FPP device on the network.
The {sub_topic} is outlined below...

FPP Publish subtopics
---------------------------------------------
FPP will published the following sub_topics (using the full topic format) if MQTT is configured

*/version -- The current full version of the fpp software
*/branch -- The git branch currently in use
*/status -- Status of the player (idle, playing)
*/warnings -- A JSON string that can be parsed into an Array of Warning messages.


*/playlist/position/status
*/playlist/name/status - Name of current playlist. Can be {null}.
*/playlist/repeat/status - {0 = not repeating current playlist, 1 = repeating current playlist}
*/playlist/section/status - either “New”, “LeadIn”, “MainPlayList”, “LeadOut”, or {null} if nothing playing
*/playlist/sectionPosition/status - The numeric position of the item currently playing in the playlist section (zero based)
*/playlist/sequence/status - Name of current sequence file playing. Can be {null}.
*/playlist/sequence/secondsTotal - The duration of the current sequence file playing, in seconds.  Can be {null}.

*/playlist/media/title - Title of the audio / video media being displayed
*/playlist/media/status - filename of the current audio/movie
*/playlist/media/artist - The artist listing in the audio / video file being played
*/playlist_details - If the MQTT Publish Frequence option (Advanced settings) is > 0 then a JSON file is published based on the duration (seconds) specified. 


Message Example for playlist_details
---------------------------------------------
Note: Currently FPP only allows one active Playlist and for each Playlist, one active "item".  However,
this will be increased in the future.  Thus activePlaylist and currentItems return list of entries. 
The sample currentItems below shows 3 records (one for the 3 most common types) but until concurrent
entries in a Playlist are allowed, only one will be displayed in real life.

{  
   "status" : "playing",    // playing or idle
   "activePlaylist" : [  
      {  
         "name" : "Name of current playlist",
         "desc" : "Description of the PlayList",
         "repeat" : 1,     // 0 if playist is not repating, 1 if repeating
         "currentItems" : [
            {
               "type": "both",
               "sequenceName" : "Name of current sequence file playing.",
               "mediaTitle" : "Title of the audio / video media being displayed",
               "mediaName" : "filename of the current audio/movie",
               "mediaArtist" : "The artist listing in the audio / video file being played",
               "secondsRemaining" : 33,
               "secondsTotal" : 54,
               "secondsElapsed" : 21
            },
            {
               "type": "sequence",
               "sequenceName" : "Name of current sequence file playing.",
               "secondsRemaining" : 33,
               "secondsTotal" : 54,
               "secondsElapsed" : 21
            },
            {
               "type": "media",
               "mediaTitle" : "Title of the audio / video media being displayed",
               "mediaName" : "filename of the current audio/movie",
               "mediaArtist" : "The artist listing in the audio / video file being played",
               "secondsRemaining" : 33,
               "secondsTotal" : 54,
               "secondsElapsed" : 21
            }
         ]       
      }
   ]
}



FPP Subscribed subtopics
---------------------------------------------
FPP will listen for these topics if MQTT is configured.  

* playlist/ALLPLAYLISTS/stop/now - Immediate stop all running playlist
* playlist/ALLPLAYLISTS/stop/graceful - gracefully stop all running playlist
* playlist/ALLPLAYLISTS/stop/afterloop.- Allow playlist to finish current loop then stop.


There are also Playlist specific topics. Currently, ${PLAYLIST} is ignored for all but /start and will affect the current running playlist. In the future, when multiple concurrent playlist are running it will affect only the specified playlist.

* playlist/${PLAYLISTNAME}/start - Starts the playlist with the given name. (payload ignored)
* playlist/${PLAYLISTNAME}/next - Forces playing of the the next item in the playlist. (payload ignored)
* playlist/${PLAYLISTNAME}/prev - Forces playing of the previous item in the playlist (payload ignored)
* playlist/${PLAYLISTNAME}/repeat - Sets if the playlist will be repeated or terminate when done. (payload should be 0 or 1)
* playlist/${PLAYLISTNAME}/startPosition - Sets the item in the playlist (zero based) to play next. Does not immediately stop current item . 
* playlist/${PLAYLISTNAME}/stop/now - Forces the playlist to stop immediately. 
* playlist/${PLAYLISTNAME}/stop/graceful - gracefully stop playlist
* playlist/${PLAYLISTNAME}/stop/afterloop - Allow playlist to finish current loop then stop.

These are system commands for specific
* system/fppd/stop - Stops the fppd process (Will also kill the MQTT listener!)
* system/fppd/restart - Executes a Fast restart on the fppd process. (Reloads all settings.) 
* system/shutdown - Shuts down the OS
* system/restart - Reboots the OS