# FPP BBB Images creation notes (work in progress)
#
# FPP images are currently based on the following Debian BeagleBone images:
# bone-debian-10.0-iot-armhf-2019-07-28-4gb.img
# from https://rcn-ee.com/rootfs/bb.org/testing/2019-07-29/buster-iot/
#
# The below steps (much can be run via copy/paste into a terminal) will
# prepare the "clean image" from above to have the appropriate 
# dependencies installed, kernel updated, bootloaders, etc... ready
# to run the FPP_Install script.    At this point, parts of it
# require editing of text files with nano.  In particular the
# /boot/uEnv.txt file and the various files in /lib/systemd/system
#
# Make sure you read all the comment in this file and follow 
# any instructions they may specify.
#
# This NEEDS to be done on a Beaglebone Black variant that
# contains an eMMC (so not a PocketBeagle) and it will wipe out
# the contents of the eMMC.   We setup the system on the eMMC
# and then copy the system to the SD card

# Burn the above image onto an SD card and insert into the BBB and boot
# Login with default debian:temppwd then "sudo bash" to become root
cd /tmp
wget https://raw.githubusercontent.com/FalconChristmas/fpp/master/SD/BBB-FlashMMC.sh
chmod +x BBB-FlashMMC.sh
./BBB-FlashMMC.sh -noreboot ext4 /dev/mmcblk1

#copy the ssh keys temporarily to allow it to boot quicker and avoid
#having to reset known_hosts while building image
mount -t ext4 /dev/mmcblk1p1 /tmp/rootfs
cp -a /etc/ssh/* /tmp/rootfs/etc/ssh
shutdown -h now


#That will flash the stretch-console image to the internal eMMC and then shutdown
#Remove the SD card and restart the BBB, re-login with default debian:temppwd
#then "sudo bash" to become root


apt-get update
apt-get -y upgrade

#need to install/generate the UTF-8 locales
apt-get install -y locales
#   echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen
localectl set-locale LANG="en_US.utf8"


apt-get install -y git
cd /opt/scripts
git pull
cd /opt/scripts/tools

#check
# ./update_kernel.sh --lts-4_19 --bone-kernel
# and see what is the latest kernel version and put it here

export KERNEL_VERSION=4.19.50-bone35
./update_kernel.sh --lts-4_19 --bone-kernel  $KERNEL_VERSION
apt-get install -y linux-headers-$KERNEL_VERSION


#if the sancloud dtbs are missing in /boot/dtbs/$(uname -r)
cp -a /boot/dtbs/$(uname -r)/*  /boot/dtbs/$KERNEL_VERSION/

apt-get remove -y --purge --autoremove linux-image-$(uname -r) linux-headers-$(uname -r)
apt-get remove -y --purge --autoremove ti-temperature-modules-$(uname -r) ti-debugss-modules-$(uname -r)


# delete old kernels and modules in /boot and /lib/modules
# and in /boot/dtbs and any initrd's
rm -rf /lib/modules/$(uname -r)
rm -rf /boot/dtbs/$(uname -r)
rm -rf /boot/initrd.img*


cd /opt/scripts/tools/developers/
sudo ./update_bootloader.sh


cd /opt/backup/uboot
export BOOTLOADERVER=v2019.04-r4
wget https://rcn-ee.com/repos/bootloader/am335x_evm/MLO-am335x_evm-${BOOTLOADERVER}
wget https://rcn-ee.com/repos/bootloader/am335x_evm/u-boot-am335x_evm-${BOOTLOADERVER}.img
mv -f MLO-am335x_evm-${BOOTLOADERVER} MLO
mv -f u-boot-am335x_evm-${BOOTLOADERVER}.img u-boot.img
echo "$BOOTLOADERVER" > version.txt



# need to keep extra memory to process network packets
echo "vm.min_free_kbytes=16384" >> /etc/sysctl.conf

#prefer ipv4
echo "precedence ::ffff:0:0/96  100" >>  /etc/gai.conf

nano /boot/uEnv.txt
#     enable_uboot_overlays=1
#     disable_uboot_overlay_video=1
#     disable_uboot_overlay_audio=1
#     uboot_overlay_pru=/lib/firmware/AM335X-PRU-UIO-00A0.dtbo
#     uboot_overlay_addr4=/lib/firmware/AM335X-I2C2-400-00A0.dtbo
#     uboot_overlay_addr5=/lib/firmware/AM335X-I2C1-400-00A0.dtbo
#     bootdelay=0
#  add "rootwait" to cmdline

nano /opt/scripts/boot/am335x_evm.sh
# change "systemctl restart serial-getty" to "systemctl is-enabled serial-getty"


apt-get -y --purge autoremove

#remove a bunch of packages that aren't neeeded, free's up space
apt-get remove -y --purge --autoremove --allow-change-held-packages roboticscape nodejs c9-core-installer \
    doc-beaglebone-getting-started \
    bonescript bone101 bb-node-red-installer \
    ardupilot-copter-bbbmini ardupilot-copter-blue ardupilot-plane-bbbmini ardupilot-plane-blue ardupilot-rover-bbbmini ardupilot-rover-blue

apt-get remove -y --purge --autoremove nginx nginx-full nginx-common

apt-get remove -y --purge --autoremove doc-beaglebonegreen-getting-started doc-seeed-bbgw-getting-started

apt-get -y --purge --autoremove remove ardupilot-copter-3.6-bbbmini ardupilot-copter-3.6-blue ardupilot-copter-3.6-pocket ardupilot-rover-3.4-bbbmini ardupilot-rover-3.4-blue ardupilot-rover-3.4-pocket

sudo apt-get remove --autoremove ti-opencl

apt-get remove -y --autoremove python3-numpy python3-opencv python3-pip python3-pkg-resources python3-scipy python3-setuptools python3-smbus\
    python3-werkzeug python3-click python3-colorama python3-decorator python3-dev python3-distro \
    python3-distutils python3-flask python3-itsdangerous python3-jinja2 python3-lib2to3 python3-libgpiod python3-markupsafe

apt-get remove  -y --autoremove gfortran glib-networking

apt-get -y clean
apt-get -y --purge autoremove
apt-get -y clean


# remove a bunch of source that is not needed, free's up space
rm -f /etc/modules-load.d/roboticscape_modules.conf
rm -rf /usr/local/lib/node_modules
rm -rf /var/lib/cloud9
rm -rf /opt/source/Robotics_Cape_Installer
rm -rf /opt/source/dtb*
rm -rf /opt/source/u-boot*
rm -rf /opt/source/rcpy
rm -rf /opt/source/pyctrl
rm -rf /opt/source/fb-test-app*
rm -rf /opt/source/beagle-tester*
rm -rf /opt/source/dtb*
rm -rf /opt/source/BB*
rm -rf /opt/source/adafruit*
rm -rf /opt/source/Userspace*
rm -rf /opt/source/py-uio
rm -rf /opt/source/librobotcontrol
rm -rf /usr/local/bin/node-red*
rm -rf /var/cache/doc-beaglebone-getting-started
rm -rf /usr/share/beagle-tester
rm -rf /usr/sbin/beagle-tester*
rm -rf /lib/systemd/system/beagle-tester.service
rm -rf /etc/udev/rules.d/beagle-tester.rules
rm -rf /opt/cloud9
rm -rf /etc/avahi/services/cloud9.service
rm -f /var/local/bb_usb_mass_storage.img

# need to reboot so that the new kernel is picked up and used
reboot
#re-login in and make sure "df -k" reports 2.5G+ of space for /

#install all the needed packages.  This will take a while to even compute everything.
#this results in about 650 packages needing to be downloaded and installed.
apt-get install -y \
    alsa-utils arping avahi-daemon avahi-discover avahi-utils \
    apache2 apache2-bin apache2-data apache2-utils \
    bc build-essential ca-certificates ccache connman bzip2 samba rsync \
    curl dh-autoreconf ethtool fbi fbset file vsftpd shellinabox vorbis-tools \
    bash-completion exfat-fuse ntp ethtool sysstat tcpdump  \
    php php-cli php-common php-curl php-pear \
    python-daemon python-smbus hdparm i2c-tools ifplugd \
    libmicrohttpd-dev libmosquitto-dev liblo-dev \
    ola ola-python libola-dev libola1 libjsoncpp-dev libtag1-dev \
    libconvert-binary-c-perl libjson-perl libinline-perl btrfs-progs \
    libgraphicsmagick++1-dev graphicsmagick-libmagick-dev-compat \
    libboost-filesystem-dev libboost-system-dev libboost-iostreams-dev libboost-date-time-dev  libboost-atomic-dev libboost-math-dev libboost-signals-dev \
    libavcodec-dev libavformat-dev libswresample-dev libsdl2-dev libswscale-dev libavdevice-dev libavfilter-dev \
    sqlite3 php-sqlite3 php-zip zip unzip dos2unix \
    mailutils librtmidi-dev libcurl4-openssl-dev \
    gcc g++ firmware-realtek firmware-atheros firmware-ralink firmware-brcm80211 firmware-iwlwifi firmware-libertas firmware-zd1211\
    firmware-ti-connectivity resolvconf wireless-tools \
    mailutils mp3info linux-cpupower cpufrequtils \
    usbutils usb-modeswitch locales lzma lshw lsof libiio-utils device-tree-compiler at haveged bluetooth bluez \
    libzstd-dev zstd gpiod libgpiod-dev libapache2-mod-php php-zip libsdl2-dev


curl -L https://cpanmin.us | perl - --sudo App::cpanminus
echo "yes" | cpanm -fin Test::Tester File::Map Net::WebSocket::Server Net::PJLink

apt-get -y clean
apt-get -y --purge autoremove
apt-get -y clean


echo "blacklist spidev" > /etc/modprobe.d/blacklist-spidev.conf
echo "# allocate 3M instead of the default 256K" > /etc/modprobe.d/uio_pruss.conf
echo "options uio_pruss extram_pool_sz=3145728" >> /etc/modprobe.d/uio_pruss.conf

# need to blacklist the gyroscope and barometer on the SanCloud enhanced or it consumes some pins
echo "blacklist st_pressure_i2c" > /etc/modprobe.d/blacklist-gyro.conf
echo "blacklist st_pressure" >> /etc/modprobe.d/blacklist-gyro.conf
echo "blacklist inv_mpu6050_i2c" >> /etc/modprobe.d/blacklist-gyro.conf
echo "blacklist st_sensors_i2c" >> /etc/modprobe.d/blacklist-gyro.conf
echo "blacklist inv_mpu6050" >> /etc/modprobe.d/blacklist-gyro.conf
echo "blacklist st_sensors" >> /etc/modprobe.d/blacklist-gyro.conf


cd /opt/
git clone https://github.com/etr/libhttpserver
cd libhttpserver
# cannot use anything newer than bd08772 due to old version of libmicrohttpd on Pi/BBB
git checkout bd08772
./bootstrap
mkdir build
cd build
CXXFLAGS=-std=c++98 ../configure --prefix=/usr
make
make install
cd /opt
rm -rf libhttpserver

cd /opt
git clone https://github.com/beagleboard/am335x_pru_package
cd am335x_pru_package
make
make install
make clean


ldconfig

# need to edit some files... sed/awk/perl can do this automatically?
#nano /etc/default/shellinabox
#    add -t to args
#nano /etc/connman/main.conf
#    PreferredTechnologies=wifi,ethernet


#install new Wifi drivers
cd /tmp
wget -O ./FPP-Wifi-Drivers.sh  http://raw.githubusercontent.com/FalconChristmas/fpp/master/SD/FPP-Wifi-Drivers.sh
chmod +x FPP-Wifi-Drivers.sh
./FPP-Wifi-Drivers.sh

rm /etc/modprobe.d/rtl8723bu-blacklist.conf

cd /root
wget -O ./FPP_Install_BBB.sh  http://raw.githubusercontent.com/FalconChristmas/fpp/master/SD/FPP_Install_BBB.sh
chmod 700 ./FPP_Install_BBB.sh
./FPP_Install_BBB.sh

# install sound drivers
cd /opt/fpp/capes/drivers/bbb
make
make install
make clean

nano /home/fpp/.bashrc
# uncomment force_color_prompt=yes

cd /etc
rm resolv.conf
ln -s /var/run/connman/resolv.conf .



# edit /etc/fstab and make sure it looks OK for tmpfs

reboot


#place 4G SD card in sd slot
# zero out everything unused so compressing the image will work better
dd if=/dev/zero of=/dev/mmcblk0 bs=1M status=progress count=3500
/opt/fpp/SD/BBB-FlashMMC.sh -s 3400M -noreboot ext4 /dev/mmcblk0
rmdir /tmp/rootfs

#On a MAC, the resulting SD cards can be used to create an image via:
# use diskutil list to get the disk name (/dev/rdisk3)
sudo dd if=/dev/rdisk3 of=FPP-v3.1-BBB.img bs=1m count=3472




# For btrfs:

dd if=/dev/zero of=/dev/mmcblk0 bs=1M status=progress count=2000
/opt/fpp/SD/BBB-FlashMMC.sh -s 1750M -noreboot btrfs /dev/mmcblk0

sudo dd if=/dev/rdisk3 of=FPP-v3.1-BBB-btrfs.img bs=1m count=2000



