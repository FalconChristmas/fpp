# FPP BBB Images creation notes (work in progress)
#
# FPP images are currently based on the following Debian BeagleBone images:
# am335x-debian-11.8-minimal-armhf-2023-10-07-2gb.img.xz
# from https://rcn-ee.net/rootfs/release/2023-10-07/bullseye-minimal-armhf/
#
# The below steps (much can be run via copy/paste into a terminal) will
# prepare the "clean image" from above to have the appropriate 
# dependencies installed, kernel updated, bootloaders, etc... ready
# to run the FPP_Install script.    At this point, parts of it
# require editing of text files with nano.  In particular the
# /boot/uEnv.txt file and the various files in /lib/systemd/system
#
# Make sure you read all the comment in this file and follow 
# any instructions they may specify.
#
# This NEEDS to be done on a Beaglebone Black variant that
# contains an eMMC (so not a PocketBeagle) and it will wipe out
# the contents of the eMMC.   We setup the system on the eMMC
# and then copy the system to the SD card

# Burn the above image onto an SD card and insert into the BBB and boot
# Login with default debian:temppwd then "sudo bash" to become root
cd /tmp
wget https://raw.githubusercontent.com/FalconChristmas/fpp/master/SD/BBB-FlashMMC.sh
chmod +x BBB-FlashMMC.sh
./BBB-FlashMMC.sh -noreboot ext4 /dev/mmcblk1

#copy the ssh keys to allow it to boot and avoid
#having to reset known_hosts while building image
mount -t ext4 /dev/mmcblk1p1 /mnt
cp -a /etc/ssh/* /mnt/etc/ssh
shutdown -h now


#That will flash the buster-console image to the internal eMMC and then shutdown
#Remove the SD card and restart the BBB, re-login with default debian:temppwd
#then "sudo bash" to become root

apt-get update
apt-get -y upgrade
localectl set-locale LANG="en_US.UTF-8"


# This MAY cause the beagle to change IP addresses, reboot to get things to settle and continue
rm -f /etc/systemd/network/50-default.network
wget -O /etc/systemd/network/50-default.network https://raw.githubusercontent.com/FalconChristmas/fpp/master/etc/systemd/network/50-default.network
sed -i -e 's/LinkLocalAddressing=fallback/LinkLocalAddressing=yes/' /etc/systemd/network/50-default.network

systemctl reload systemd-networkd

systemctl unmask systemd-networkd
systemctl unmask systemd-resolved

systemctl restart systemd-networkd
systemctl restart systemd-resolved

systemctl enable systemd-networkd
systemctl enable systemd-resolved



#check
cd /root
export NEW_KERNEL_VERSION=6.7.4-fpp12_1
wget https://github.com/FalconChristmas/fpp-linux-kernel/raw/master/debs/linux-image-${NEW_KERNEL_VERSION}_armhf.deb
# wget https://github.com/FalconChristmas/fpp-linux-kernel/raw/master/debs/linux-headers-${NEW_KERNEL_VERSION}_armhf.deb
dpkg -i *.deb
rm -f *.deb
apt-get remove -y --purge --autoremove linux-image-$(uname -r) linux-headers-$(uname -r) bbb.io-kernel-tasks

# delete old kernels and modules in /boot and /lib/modules
# and in /boot/dtbs and any initrd's
rm -rf /lib/modules/$(uname -r)
rm -rf /boot/dtbs/$(uname -r)
rm -rf /boot/initrd.img*

# remove a bunch of source that is not needed, free's up space
rm -f /etc/modules-load.d/roboticscape_modules.conf
rm -rf /usr/local/lib/node_modules
rm -rf /var/lib/cloud9
rm -rf /opt/source/Robotics_Cape_Installer
rm -rf /opt/source/dtb*
rm -rf /opt/source/u-boot*
rm -rf /opt/source/rcpy
rm -rf /opt/source/pyctrl
rm -rf /opt/source/fb-test-app*
rm -rf /opt/source/beagle-tester*
rm -rf /opt/source/dtb*
rm -rf /opt/source/BB*
rm -rf /opt/source/adafruit*
rm -rf /opt/source/Userspace*
rm -rf /opt/source/py-uio
rm -rf /opt/source/librobotcontrol
rm -rf /usr/local/bin/node-red*
rm -rf /var/cache/doc-beaglebone-getting-started
rm -rf /usr/share/beagle-tester
rm -rf /usr/sbin/beagle-tester*
rm -rf /lib/systemd/system/beagle-tester.service
rm -rf /etc/udev/rules.d/beagle-tester.rules
rm -rf /opt/cloud9
rm -rf /etc/avahi/services/cloud9.service
rm -f /var/local/bb_usb_mass_storage.img
rm -f /etc/bbb.io/templates/beaglebone-getting-started-2022-01-12.img
rm -rf /opt/u-boot/bb-u-boot-am57xx-evm

# blacklist  bluetooth (needed if making image on BBGG or BBBW)
echo "blacklist bluetooth" > /etc/modprobe.d/blacklist-bluetooth.conf
echo "blacklist hci_uart" >> /etc/modprobe.d/blacklist-bluetooth.conf
echo "blacklist bnep" >> /etc/modprobe.d/blacklist-bluetooth.conf

# need to reboot so that the new kernel is picked up and used
reboot
#re-login in and make sure "df -k" reports 2.5G+ of space for /


cd /root
wget -O ./FPP_Install.sh  http://raw.githubusercontent.com/FalconChristmas/fpp/master/SD/FPP_Install.sh
chmod 700 ./FPP_Install.sh
./FPP_Install.sh --img

# once FPP_Install is done, the wifi drivers and such are installed so the linux-headers
# are no longer needed, remove them to save 150MB of space
apt-get remove -y --purge --autoremove linux-headers-$(uname -r)
apt-get clean

# edit /etc/fstab and make sure it looks OK for tmpfs
reboot


#place 4G SD card in sd slot
# zero out everything unused so compressing the image will work better
dd if=/dev/zero of=/dev/mmcblk0 bs=1M status=progress count=3800
/opt/fpp/SD/BBB-FlashMMC.sh -s 3500M -noreboot -clear ext4 /dev/mmcblk0
rmdir /tmp/rootfs

# Put the SD card back in a Linux system and run the following (substitute
# the proper device name for your SD card in place of '/dev/sdc'):
VERSION=8.0-pre-alpha2
OSVERSION=2024-02
DEVICE=/dev/sde
dd if=${DEVICE} of=FPP-v${VERSION}-BBB.img bs=1M count=3572


# To create the squashfs image needed for OS updates
# On a separate Linux box:  (this will take a LOOOONG time)
# mksquashfs is multithreaded so its recommended to use a multicore
# box for this and not an actual BBB
apt-get install squashfs-tools
mount ${DEVICE}1 /mnt
mksquashfs /mnt BBB-${VERSION}_${OSVERSION}.fppos -b 512K -comp xz
cd /mnt/root
tar -czf ~/ccache-BBB-2023.x-v${VERSION}.tar.gz .ccache
cd ~
umount /mnt
