# FPP BB64 Image creation notes (work in progress)
#
# FPP images are currently based on the following Debian pocketbeagle2 images:
# https://rcn-ee.net/rootfs/debian-arm64-12-bookworm-minimal-v6.12-ti/2025-07-02/

# Burn the above image onto an SD card and insert into a running Linux machine
# We need to make changes to the filesystems and layout prior to booting
# on a BB64 device

# Need to resize the root to be at least 5G
# Using gparted on Linux/gui is easiest option.
# In general, if using the above image, it will default to about 6.3G which is fine
# and this step can be skipped


# First, mount the rootfs on a Linux machine.   We need to disable the growfs on
# first boot:
mkdir -p /mnt/tmp
mount /dev/sdc3 /mnt/tmp
mount /dev/sdc1 /mnt/tmp/boot/firmware
cd /mnt/tmp
rm -f ./etc/systemd/system/multi-user.target.wants/grow_partition.service
rm -f ./var/lib/systemd/deb-systemd-helper-enabled/grow_partition.service.dsh-also
rm -f ./etc/bbb.io/growpart
mv ./usr/bin/bb-growpart ./usr/bin/bb-growpart.orig
wget -4 -O ./etc/systemd/network/50-default.network https://raw.githubusercontent.com/FalconChristmas/fpp/master/etc/systemd/network/50-default.network
sed -i -e 's/LinkLocalAddressing=fallback/LinkLocalAddressing=yes/' ./etc/systemd/network/50-default.network
rm ./etc/systemd/network/eth0* ./etc/systemd/network/mlan* ./etc/systemd/network/wlan*
cd /mnt/tmp/boot/firmware
echo  "user_name=fpp" >> sysconf.txt
echo  "user_password=falcon" >> sysconf.txt
cd ~
umount /mnt/tmp/boot/firmware
umount /mnt/tmp


# Insert into PB2 and power up
sudo bash
apt-get update
apt-get upgrade

# Free up some space by removing stuff we know won't be needed
apt-get remove --autoremove --purge bb-node-red-installer bb-code-server ti-zephyr-firmware bb-u-boot-beagleboneai64 bb-u-boot-beagleplay bb-u-boot-beagleplay-mainline libstd-rust-dev rustc
apt-get remove --autoremove firmware-nvidia-graphics firmware-intel-graphics
rm -rf /opt/source/dtb-5* /opt/source/dtb-6.1-* /opt/source/dtb-6.6-*  /opt/source/spi*

#update to the latest 6.15 kernel to get the latest wifi drivers and other fixes
apt-get remove bbb.io-kernel-6.12-ti bbb.io-kernel-6.12-ti-k3-am62 linux-image-$(uname -r)
apt-get install bbb.io-kernel-6.15-k3

reboot

# The in-kernel driver for the standard USB -> Gigabit device we use has some reporting issues and
# always report half duplex mode and sometimes only 100MB connection (despite actualy gigabit connection
# as verified by unifi and speed tests) and other issues which can cause warnings to pop up (for
# colorlights that need gigabit).  We'll install the driver directly from Asix and use it.
apt-get install -y linux-headers-$(uname -r)
cd /opt
curl "https://www.asix.com.tw/en/support/download/file/1943?time=1748550560053" --output asix.tar.bz2
tar -xjf asix.tar.bz2
mv /lib/modules/$(uname -r)/kernel/drivers/net/usb/ax88179_178a.ko.xz /lib/modules/$(uname -r)/kernel/drivers/net/usb/ax88179_178a.ko.xz.old
cd ASIX_USB_NIC_Linux_Driver_Source_v3.5.0
make
make install
cd ..
rm -rf ASIX_USB_NIC_Linux_Driver_Source_v3.5.0
cat > /etc/udev/rules.d/99-asix.rules << EOF
ACTION=="add", SUBSYSTEM=="usb", ATTR{idVendor}=="0b95", ATTR{idProduct}=="1790", ATTR{bConfigurationValue}!="1", ATTR{bConfigurationValue}="1"
EOF
rm  asix.tar.bz2
apt-get remove -y --autoremove linux-headers-$(uname -r)

#remove some unneeded things to clear up space
rm -rf /opt/bb-code-server
rm -rf /opt/vsx-examples


reboot


cd /root
wget -4 -O ./FPP_Install.sh  http://raw.githubusercontent.com/FalconChristmas/fpp/master/SD/FPP_Install.sh
chmod 700 ./FPP_Install.sh
export FPPBRANCH=v9.2
./FPP_Install.sh --img

# Reboot and make sure everything looks ok

# Before shutting down, run:
systemctl enable grow_partition.service
journalctl --flush --rotate --vacuum-time=1s
mv /usr/bin/bb-growpart.orig /usr/bin/bb-growpart
touch /etc/bbb.io/growpart
sync
fstrim -v /



    DEVICE=/dev/sdc
    VERSION=9.2
    OSVERSION=2025-09
    BLOCKS=7800
    mount "${DEVICE}3" /mnt
    rm -f /mnt/home/fpp/.bash_history
    rm -f /mnt/home/fpp/media/settings
    rm -rf /mnt/home/fpp/media/config/backups/*
    rm -f /mnt/home/fpp/media/config/*
    rm -f /mnt/home/fpp/media/logs/*
    rm -rf /mnt/home/fpp/media/tmp/*
    rm -rf /mnt/home/fpp/media/crashes/*
    rm -rf /mnt/home/fpp/media/upload/*
    rm -f /mnt/var/log/*
    rm -f /mnt/etc/ssh/*key*
    rm -f /mnt/root/.bash_history
    echo "uninitialized" > /mnt/etc/machine-id
    umount /mnt
    zerofree -v "${DEVICE}3"
    dd if=${DEVICE} of=FPP-v${VERSION}-BB64.img bs=1M count=${BLOCKS}
    zip -9 FPP-v$VERSION-BB64.img.zip FPP-v${VERSION}-BB64.img

This will create a file called FPP-${VERSION}-BB64.img.zip that can be distributed
for testing/release.


# To create the squashfs image needed for OS updates
# On a separate Linux box:  (this will take a LOOOONG time)
mount ${DEVICE}3 /mnt
mount ${DEVICE}1 /mnt/boot/firmware
mksquashfs /mnt BB64-${VERSION}_${OSVERSION}.fppos -b 512K -comp xz
cd /mnt/root
tar -czf ~/ccache-BB64-2025.x-v${VERSION}.tar.gz .ccache
cd ~
umount /mnt/boot/firmware
umount /mnt


