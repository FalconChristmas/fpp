=============================================================================
Instructions for creating a new FPP SD image package for the Raspberry Pi
=============================================================================

Install the latest Raspbian Stretch Lite image to the SD card.  The last
version tested is 2019-06-20-raspbian-buster-lite.img

Resize the root partition to 3.5GB using fdisk (substitute the proper device
for your SD card).

    fdisk /dev/sdg
    p
	(Note the original start block of partition 2, you will need this later)
    d
    2
    n
    p
    2
	(Replace 540672 with the original start block of partition 2 noted earlier)
    540672
	(FIXME, downsize this value once install is tested)
    +3500M
    p
    w

FSCK and resize the root partition (again, use your device name.

    e2fsck -f /dev/sdg2
    resize2fs /dev/sdg2

Disable the auto partition resize script on the SD and enable the SSH server while
we have the partition mounted:

	# Make a temp mount location
	mkdir /mnt/tmp
	# Mount the boot partition
	mount /dev/sdg1 /mnt/tmp
	# Backup the cmdline.txt file
	cp /mnt/tmp/cmdline.txt /mnt/tmp/cmdline.org
	# Disable the auto-resize of the root partition
	sed -i -e "s# init=/usr/lib/raspi-config/init_resize.sh##" /mnt/tmp/cmdline.txt
	# Enable ssh by default
	touch /mnt/tmp/ssh
	# Unmount the file system
	umount /mnt/tmp
	# Sync the changes so it's safe to remove the SD card
	sync

Remove the SD card and boot it up in a Pi.


Do a system upgrade to make sure everything is at the latest versions
    sudo apt-get update
    sudo apt-get dist-upgrade
    sudo apt-get clean

Reboot again to pick up the latest kernel that may have been installed with the dist-upgrade

cd /etc
rm resolv.conf
ln -s /var/run/connman/resolv.conf .

On the Pi, run the FPP installer:
	wget -O ./FPP_Install.sh \
		http://raw.githubusercontent.com/FalconChristmas/fpp/master/SD/FPP_Install.sh
	chmod 700 ./FPP_Install.sh
	sudo ./FPP_Install.sh --build-omxplayer

This will install FPP and perform all required changes to the root filesystem
and add the FPP user, install required packages, etc.

If you are installing for your own use, you can reboot the Pi and FPP should start
up.

	su - fpp
	sudo shutdown -r now

If you are installing to create a SD image zip, do the following:
    If you did the above on a armv7 Pi, you will need to boot the new image up
    on a armv6 device (or vice versa) to compile the Wifi drivers for the other
    architecture/kernel.  Boot up and then run:
    cd /opt/fpp/SD
    sudo ./FPP-Wifi-Drivers.sh


	# Reboot to make sure things take
	sudo shutdown -r now

	Once the Pi reboots, login as the new fpp user and run the following:

	# Reset the SSH keys
	sudo rm -rf /etc/ssh/ssh_host*key*
	# Remove old pi user's home directory
	sudo rm -rf /home/pi
	# Clean up fppd logs
	sudo systemctl stop fppd.service
	sudo systemctl stop apache2.service
	cd /home/fpp/media/logs ; ls -al ; /bin/ls -1 | while read FILE; do > ${FILE}; done ; ls -al
	# Zero out free space so the SD image will compress better
	sudo dd if=/dev/zero of=zero.dd bs=4M ; sudo rm zero.dd ; df -k
	# Shutdown the Pi
	sudo shutdown -h now

Put the SD card back in a Linux system and run the following (substitute
the proper device name for your SD card in place of '/dev/sdg'):

	NOTE: The 3800 on the "BLOCK=" line below must be at least the new size of the
	      second partition created at the top of this document using fdisk.

	VERSION=v3.1-Pi
	BLOCKS=3800
	sudo time dd if=/dev/sdg bs=1M count=${BLOCKS} > FPP-${VERSION}.img
	time zip -9 FPP-$VERSION.zip FPP-${VERSION}.img
	unzip -v FPP-$VERSION.zip

This will create a file called FPP-${VERSION}.zip that can be distributed
for testing/release.

=============================================================================

ALPHA set of instructions for switching Pi root file system to btrfs. The
current SD images will still use ext4.

NOTE: There are several known issues with this, including the fact that
upgrading the kernel will prevent the Pi from booting because the initrd may
not be rebuilt and the initrd filename in config.txt will be incorrect.

# update /boot/cmdline.txt to change root location to "root=/dev/mmcblk0p2"

sudo apt-get update
sudo apt-get -y install btrfs-tools btrfs-progs

# append "btrfs" to /etc/initramfs-tools/modules
echo "btrfs" | sudo tee -a /etc/initramfs-tools/modules

#make sure we have the latest supported bootloader and kernel
sudo apt-get dist-upgrade -y
sudo apt-get install --reinstall raspberrypi-bootloader raspberrypi-kernel

sudo update-initramfs -c -k `uname -r`

# update /boot/config.txt to add 'initramfs initrd.img-4.14.18+' (or correct
# kernel version) to the end of the file

# reboot to make sure system still boots correctly

# now copy /dev/mmcblk0p2, reformat as btfs, mount with compress option,
# and copy data back.  NOTE: This should be done on a newer system so that
# 'zstd' compression is used instead of zlib or lzo

sudo mkfs.btrfs -L root -f /dev/sdg2
sudo mount -o compress /dev/sdg2 /mnt/tmp

sudo losetup /dev/loop0 ${IMGFILE}
sudo kpartx -av /dev/loop0
sudo mount /dev/mapper/loop0p2 /mnt/tmp2
sudo rsync -avxHW /mnt/tmp2/ /mnt/tmp/
sudo umount /mnt/tmp2
sudo kpartx -d /dev/loop0
sudo losetup -d /dev/loop0

# update /mnt/tmp/etc/fstab to set btrfs filesystem and compress mount option
/dev/mmcblk0p2  /               btrfs   compress=zstd,noatime  0    1

# also update /boot to read-only at the same time.

sudo umount /mnt/tmp

# boot the SD up in the Pi

TODO
- setup something to rebuild the initrd and update /boot/config.txt whenever a
  new kernel is installed.


Attempt to expand root filesystem to fill SD card
sudo sfdisk --force --no-reread /dev/mmcblk0 <<-EOF
8192,85045,0x0C,*
94208,,,-
EOF

sudo partprobe /dev/mmcblk0

sudo btrfs filesystem resize max /

