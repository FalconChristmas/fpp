#!/bin/bash

FindTetherWIFIAdapater() {
    local TetherInterface=$(getSetting TetherInterface)
    if [ "x${TetherInterface}" == "x" ]; then
        WLDEVICES=$(ls -d /sys/class/net/wl*)
        for d in $WLDEVICES; do
            DEV=$(basename $d)
            HASLINKDEV=$(iwconfig $DEV | grep "Not-Associated")
            if [ "x${HASLINKDEV}" != "x" ]; then
                TetherInterface=$DEV
            fi
        done
    fi
    if [ "x${TetherInterface}" == "x" ]; then
        TetherInterface="wlan0"
    fi
    echo "$TetherInterface"
}

CreateHostAPDConfig() {
    TetherSSID=$(getSetting TetherSSID)
    TetherPSK=$(getSetting TetherPSK)
    if [ "${TetherSSID}x" == "x" ]; then
        TetherSSID="FPP"
    fi
    if [ "${TetherPSK}x" == "x" ]; then
        TetherPSK="Christmas"
    fi
    WifiRegulatoryDomain=$(getSetting WifiRegulatoryDomain)
    if [ "$WifiRegulatoryDomain" == "" ]; then
        WifiRegulatoryDomain="US"
    fi

cat > /etc/hostapd/hostapd.conf <<-EOF
interface=$1
driver=nl80211
wpa_passphrase=${TetherPSK}
ssid=${TetherSSID}
country_code=${WifiRegulatoryDomain}
hw_mode=g
channel=11
macaddr_acl=0
auth_algs=3
wpa=2
wpa_key_mgmt=WPA-PSK
wpa_pairwise=TKIP
rsn_pairwise=CCMP
wmm_enabled=0
ignore_broadcast_ssid=0
wpa_group_rekey=3600
wpa_gmk_rekey=86400
EOF

    HOSTAPDVER=`hostapd -v 2>&1 | colrm 1 9 | colrm 4 | colrm 2 2 | head -1`
    if [ "$HOSTAPDVER" -lt "30" ]; then
	    echo "reassociation_deadline=3000" >> /etc/hostapd/hostapd.conf
	    echo "pmk_r1_push=1" >> /etc/hostapd/hostapd.conf
	    echo "ft_over_ds=0" >> /etc/hostapd/hostapd.conf
	    echo "bss_transition=1" >> /etc/hostapd/hostapd.conf
    fi

    if [ -f /usr/bin/qrencode ]; then 
        # Low error correction MAY result in a QR that can be pixel doubled which generally works better for phones to pick up
        /usr/bin/qrencode -t ASCII -m 0 -s 6 -l L -o "${FPPHOME}/media/tmp/wifi-L.ascii" "WIFI:T:WPA;S:${TetherSSID};P:${TetherPSK};;"
        # Generate a High error correction as well.  If we cannot pixel double, this will give more info to the phone/device
        /usr/bin/qrencode -t ASCII -m 3 -s 6 -l H -o "${FPPHOME}/media/tmp/wifi-H.ascii" "WIFI:T:WPA;S:${TetherSSID};P:${TetherPSK};;"
    fi
}


if [ "${FPPPLATFORM}" != "MacOS" ]; then
declare -A NETMASK2SUBNET=(
    ['255.255.255.252']='30'
    ['255.255.255.248']='29'
    ['255.255.255.240']='28'
    ['255.255.255.224']='27'
    ['255.255.255.192']='26'
    ['255.255.255.128']='25'
    ['255.255.255.0']='24'
    ['255.255.254.0']='23'
    ['255.255.252.0']='22'
    ['255.255.248.0']='21'
    ['255.255.240.0']='20'
    ['255.255.224.0']='19'
    ['255.255.192.0']='18'
    ['255.255.128.0']='17'
    ['255.255.0.0']='16'
)
fi
SetupFPPNetworkConfigViaSystemdNetworkd() {
    SYSCTRLVERSION=`systemctl --version | colrm 1 8 | colrm 4 | head -1`
    CONFIGS=`ls ${FPPHOME}/media/config/interface.w*; ls ${FPPHOME}/media/config/interface.e*`
    DEFGW="none"
    DNS1=""
    DNS2=""
    if [ -f "${FPPHOME}/media/config/dns" ]
    then
        . ${FPPHOME}/media/config/dns
    fi
    if [ "x$DNS1" != "x" ]
    then
        DNS="$DNS1"
    fi
    if [ "x$DNS2" != "x" ]
    then
        DNS="$DNS1,$DNS2"
    fi

    WifiRegulatoryDomain=$(getSetting WifiRegulatoryDomain)
    if [ "$WifiRegulatoryDomain" == "" ]; then
        WifiRegulatoryDomain="US"
    fi
    iw reg set "$WifiRegulatoryDomain"

    TetherInterface=$(FindTetherWIFIAdapater)
    TetherEnabled=$(getSetting EnableTethering)
    if [ "x${TetherEnabled}" == "x" ]; then
        TetherEnabled="";
    fi

    # clear out old configuration, these will be regenerated if needed below
    rm -f /etc/wpa_supplicant-wl*.conf
    rm -f /etc/wpa_supplicant/wpa_supplicant-wl*.conf
    rm -f /etc/systemd/network/10-*.network
    rm -f /etc/hostapd/hostapd.conf

    ENABLEHOSTAPD="0"
    IP_FORWARD="0"
    for f in $CONFIGS; do
        unset SSID
        unset PSK
        unset INTERFACE
        unset MAC
        unset HIDDEN
        unset PROTO
        unset GATEWAY
        unset NETMASK
        unset ADDRESS
        unset BACKUPSSID
        unset BACKUPPSK
        unset BACKUPHIDDEN
        DHCPSERVER=0
        DHCPOFFSET=100
        DHCPPOOLSIZE=50
        ROUTEMETRIC=0
        IPFORWARDING=0
        . ${f}

        # Handle the PSK differently since variable substitution is
        # performed when sourcing the config file which prevents using a PSK
        # with a dollar sign in it.  Rather than trying to escape/unescape
        # things in the settings UI code, handle it here.
        PSK=$(grep "^PSK=" ${f} | sed -e "s/^PSK=\"//" -e "s/\"$//")

        TMPFILE="/var/tmp/10-${INTERFACE}.network"
        rm -f ${TMPFILE}
        echo "[Match]" >> ${TMPFILE}
        echo "Name=${INTERFACE}" >> $TMPFILE

        if [[ "$INTERFACE" == "wl"* ]] ; then
            echo "Type=wlan"  >> $TMPFILE
        else
            echo "Type=ether"  >> $TMPFILE
        fi
        echo "" >> $TMPFILE
        echo "[Network]" >> $TMPFILE
        if [ "x$DNS1" != "x" ]; then
            echo "DNS=${DNS1}" >> $TMPFILE
        fi
        if [ "x$DNS2" != "x" ]; then
            echo "DNS=${DNS2}" >> $TMPFILE
        fi

        ADDRESSLINES=""
        if [ "$PROTO" == "dhcp" ]; then
            ADDRESSLINES="DHCP=yes"
            DHCPSERVER=0
        else
            SUBNET="${NETMASK2SUBNET[$NETMASK]}"
            if [ "x$SUBNET" == "x" ]; then
                SUBNET="24"
            fi
            ADDRESSLINES="Address=$ADDRESS/$SUBNET"
        fi
        if [[ "$INTERFACE" == "wl"* ]] ; then
            if [ "$TetherEnabled" == "1" ] && [ "$INTERFACE" == "$TetherInterface" ]; then
                CreateHostAPDConfig ${TetherInterface}
                ADDRESSLINES="Address=192.168.8.1/24"
                DHCPSERVER=1
                ENABLEHOSTAPD="1"
            else 
                WPATMPFILE="/var/tmp/wpa_supplicant-${INTERFACE}.conf"
                rm -f ${WPATMPFILE}
                echo "ctrl_interface=/var/run/wpa_supplicant" >> ${WPATMPFILE}
                echo "ctrl_interface_group=0" >> ${WPATMPFILE}
                echo "update_config=1" >> ${WPATMPFILE}
                echo "country=${WifiRegulatoryDomain}" >> ${WPATMPFILE}
                echo "" >> ${WPATMPFILE}
                echo "network={" >> ${WPATMPFILE}
                echo "  ssid=\"${SSID}\"" >> ${WPATMPFILE}
                if [ "x$PSK" != "x" ]; then
                    echo "  psk=\"${PSK}\"" >> ${WPATMPFILE}
                fi
                echo "  key_mgmt=WPA-PSK" >> ${WPATMPFILE}
                echo "  scan_ssid=1" >> ${WPATMPFILE}
                echo "  priority=100" >> ${WPATMPFILE}
                echo "}" >> ${WPATMPFILE}
                echo "" >> ${WPATMPFILE}
                if [ "x$BACKUPSSID" != "x" ]; then
                    echo "network={" >> ${WPATMPFILE}
                    echo "  ssid=\"${BACKUPSSID}\"" >> ${WPATMPFILE}
                    if [ "x$BACKUPPSK" != "x" ]; then
                        echo "  psk=\"${BACKUPPSK}\"" >> ${WPATMPFILE}
                    fi
                    echo "  key_mgmt=WPA-PSK" >> ${WPATMPFILE}
                    echo "  scan_ssid=1" >> ${WPATMPFILE}
                    echo "  priority=10" >> ${WPATMPFILE}
                    echo "}" >> ${WPATMPFILE}
                    echo "" >> ${WPATMPFILE}
                fi
                cp $WPATMPFILE /etc/wpa_supplicant
                systemctl enable "wpa_supplicant@${INTERFACE}.service"
                systemctl reload-or-restart "wpa_supplicant@${INTERFACE}.service"
            fi
        fi
        if [ "$DHCPSERVER" == "1" ]; then
            echo "DHCPServer=yes" >> $TMPFILE
        fi
        if [ "$IPFORWARDING" == "1" ]; then
            echo "IPForward=yes" >> $TMPFILE
            IP_FORWARD="1"
        fi
        if [ "$IPFORWARDING" == "2" ]; then
            # echo "IPMasquerade=both" >> $TMPFILE
            # systemd-networkd might not have masqarate support compiled in, we'll just do
            # it manually
            modprobe iptable_nat
            IP_FORWARD="1"

            nft add table nat
            nft 'add chain nat postrouting { type nat hook postrouting priority 100 ; }'
            nft add rule nat postrouting oif ${INTERFACE} masquerade
        fi

        echo "$ADDRESSLINES" >> $TMPFILE
        if [ "$SYSCTRLVERSION" -gt "250" ]; then
             echo "IgnoreCarrierLoss=5s" >> $TMPFILE
        fi
        echo "" >> $TMPFILE

        if [ "x$GATEWAY" != "x" ]; then
            echo "[Route]" >> $TMPFILE
            echo "Gateway=${GATEWAY}" >> $TMPFILE
            if [ "$ROUTEMETRIC" != "0" ]; then
                echo "Metric=${ROUTEMETRIC}" >> $TMPFILE
            fi
        fi
        echo "" >> $TMPFILE

        if [ "$PROTO" == "dhcp" ]; then
            echo "[DHCPv4]" >> $TMPFILE
            echo "ClientIdentifier=mac" >> $TMPFILE
            echo "" >> $TMPFILE
        fi
        if [[ "$ROUTEMETRIC" != "0" && "$PROTO" != "dhcp" ]]; then
            echo "[DHCPv4]" >> $TMPFILE
        fi
        if [ "$ROUTEMETRIC" != "0" ]; then
            echo "RouteMetric=${ROUTEMETRIC}" >> $TMPFILE
            echo "" >> $TMPFILE
            echo "[IPv6AcceptRA]" >> $TMPFILE
            echo "RouteMetric=${ROUTEMETRIC}" >> $TMPFILE
            echo "" >> $TMPFILE
        fi

        if [ "$DHCPSERVER" == "1" ]; then
            echo "[DHCPServer]" >> $TMPFILE
            echo "PoolOffset=${DHCPOFFSET}" >> $TMPFILE
            echo "PoolSize=${DHCPPOOLSIZE}" >> $TMPFILE
            if [ "x$DNS1" != "x" ]; then
                echo "EmitDNS=yes" >> $TMPFILE
                echo "DNS=${DNS1}" >> $TMPFILE
            fi
            echo "" >> $TMPFILE
            if [ -f "${FPPHOME}/media/config/leases.${INTERFACE}" ]; then
                cat "${FPPHOME}/media/config/leases.${INTERFACE}" >> $TMPFILE
                echo "" >> $TMPFILE
            fi

            if [ ! -f "${FPPHOME}/media/config/proxies" ]; then
                # DHCPServer is on, lets make sure proxies are enabled
                # so they can be found via the proxies page
                echo "RewriteEngine on" >> ${FPPHOME}/media/config/proxies
                echo "RewriteBase /proxy/" >> ${FPPHOME}/media/config/proxies
                echo "" >> ${FPPHOME}/media/config/proxies
                echo 'RewriteCond %{HTTP:Upgrade}     "websocket" [NC]' >> ${FPPHOME}/media/config/proxies
                echo 'RewriteCond %{HTTP:Connection}  "Upgrade" [NC]' >> ${FPPHOME}/media/config/proxies
                echo 'RewriteRule ^(.*)/(.*)$ "ws://$1/$2" [P]'  >> ${FPPHOME}/media/config/proxies
                echo "" >> ${FPPHOME}/media/config/proxies
                echo 'RewriteRule ^(.*)/(.*)$  http://$1/$2  [P,L]' >> ${FPPHOME}/media/config/proxies
                echo 'RewriteRule ^(.*)$  $1/  [R,L]' >> ${FPPHOME}/media/config/proxies
            fi
        fi

        cp -f $TMPFILE /etc/systemd/network
    done
    sysctl net.ipv4.ip_forward=${IP_FORWARD}

    systemctl reload-or-restart systemd-networkd.service
    if [ "${ENABLEHOSTAPD}" = "1" ]; then
        systemctl reload-or-restart hostapd.service
    else
        rm -f ${FPPHOME}/media/tmp/wifi-*.ascii
	HAPDE=$(systemctl is-enabled  hostapd)
        HAPDA=$(systemctl is-active  hostapd)
        if [ "$HPDE" == "enabled" ] || [ $"HAPDA" == "active" ]; then
	    systemctl stop hostapd.service
	    systemctl disable hostapd.service
	fi
    fi
}
SetupFPPNetworkConfig () {
    if [ -f /sbin/rfkill ]; then
        rfkill unblock wifi; rfkill unblock all
    fi

    SetupFPPNetworkConfigViaSystemdNetworkd
}

WaitForInterfacesUp() {
    IPS="$(ip -o -4 addr | grep -v usb | grep -v 127.0)"
    if [ -z "$IPS" ]; then
        # Loop up to 12 times, so max wait time is 12
        for i in {1..12}
        do
            sleep 1
            IPS="$(ip -o -4 addr | grep -v usb | grep -v 127.0)"
            #echo "y:  $IPS" >> /tmp/ips.txt
            if [ -z "$IPS" ]
            then
                continue
            fi

            break
        done
	if [ -z "$IPS" ]; then
            #on some adapters, we need to down/up in order to be able
            #to detect the link on it and attach to wifi
            ifconfig wlan0 down
            sleep 1
            ifconfig wlan0 up
            # Loop up to 8 times, so max wait time is 8 * 2
            for i in {1..8}
            do
               sleep 2
               IPS="$(ip -o -4 addr | grep -v usb | grep -v 127.0)"
               if [ -z "$IPS" ]; then
                   continue
               fi
               break
            done
        fi
    fi

    #turn off power management on wireless... not all adapters
    # support this so just /dev/null any output
    WLDEVICES=$(ls -d /sys/class/net/wl*)
    for d in $WLDEVICES; do
        DEV=$(basename $d)
        iwconfig $DEV power off 2>/dev/null >/dev/null
    done
}

DetectNetworkModules() {
    #if the interfaces have module drivers, we'll let Linux autoload the modules at boot to
    #speed up the discovery/probe
    for devicename in /sys/class/net/* ; do 
        if [ -h "${devicename}/device/driver/module" ]; then
            MODULELINK=$(readlink ${devicename}/device/driver/module)
            MODULE=$(basename "${INTERFACE}/device/driver/module/${MODULELINK}" )

            if [ "${MODULE}" != "brcmfmac" ]; then
                touch /etc/modules-load.d/network.conf
                if ! grep -Fxq "${MODULE}" /etc/modules-load.d/network.conf ; then
                    echo "${MODULE}" >> /etc/modules-load.d/network.conf
                fi
            fi
            unset MODULE
            unset MODULELINK
        fi
    done
}

MaybeEnableTethering() {
    TetherEnabled=$(getSetting EnableTethering)

    if [ "x${TetherEnabled}" == "x" ]; then
        TetherEnabled=0
    fi

    if [ "$TetherEnabled" == "0" ]; then
        # In a perfect world wlan0 would have no IP Address at this point, but in FPP 6.3
        # on BBB, it has the tethering IP leftover on a wlan interface from the last boot,
        # so ignore that when trying to work out if we're going to enable tether mode again.
        IPS="$(ip -o -4 addr | grep -v usb | grep -v 127.0 | grep -v 'wlan. *inet 192.168.8.1')"

        ETHDEVICES=$(ls -d /sys/class/net/e*)
        HASLINK=""
        for d in $ETHDEVICES; do
            DEV=$(basename $d)
            HASLINKDEV=$(ethtool $DEV | grep "Link detected: yes")
            if [ "x${HASLINKDEV}" != "x" ]; then
                HASLINK=1
            fi
        done
        if [ "x${HASLINK}" = "x" ]; then
            # no link on eth0
            if [ -z "$IPS" ]; then
                #No IPS from anywhere either, lets turn on tethering
                TetherEnabled=1
            fi
        fi
    fi
    TetherInterface=$(FindTetherWIFIAdapater)
    if [ "$TetherEnabled" == "1" ]; then
        for i in {1..30}
        do
            if [ ! -e "/sys/class/net/${TetherInterface}" ]; then
                echo "${TetherInterface} is not available, waiting..."
                sleep 1
            fi
        done
    fi
    if [ ! -e "/sys/class/net/${TetherInterface}" ]; then
        # see if the wait above caused a different wifi adapter to appear
        TetherInterface=$(FindTetherWIFIAdapater)
        if [ ! -e "/sys/class/net/${TetherInterface}" ]; then
            # no wifi adapter, no point enabling tethering
            TetherEnabled=2
        fi
    fi

    if [ "$TetherEnabled" == "1" ]; then
        CreateHostAPDConfig ${TetherInterface}
        TMPFILE="/var/tmp/10-${TetherInterface}.network"
        rm -f ${TMPFILE}
        echo "[Match]" >> ${TMPFILE}
        echo "Name=${TetherInterface}" >> $TMPFILE
        echo "Type=wlan"  >> $TMPFILE
        echo "" >> $TMPFILE
        echo "[Network]" >> $TMPFILE
        echo "DHCP=no" >> $TMPFILE
        echo "Address=192.168.8.1/24" >> $TMPFILE
        echo "DHCPServer=yes" >> $TMPFILE
        echo "" >> $TMPFILE
        
        echo "[DHCPServer]" >> $TMPFILE
        echo "PoolOffset=10" >> $TMPFILE
        echo "PoolSize=100" >> $TMPFILE
        echo "EmitDNS=no" >> $TMPFILE
        
        cp $TMPFILE /etc/systemd/network
        systemctl reload-or-restart systemd-networkd.service
        systemctl reload-or-restart hostapd.service
    fi
}

#############################################################################
# Functions for compiling and cleaning up compiled binaries
BINARIES="fppd fpp fppmm"
cleanCompiledBinaries() {
    echo "in Clean stage"

	if [ "x${FPPDIR}" = "x/opt/fpp" ]
	then
		cd ${FPPDIR}/src && ${SUDO} make clean
	else
		cd ${FPPDIR}/src && sudo -u ${FPPUSER} make clean
	fi

    for p in ${MEDIADIR}/plugins/*; do
        if [ -d "$p" ]; then
            if [ -f "${p}/Makefile" ]; then
                echo "Cleaning plugin $p"
                make -C "${p}" -f "${p}/Makefile" SRCDIR=${FPPDIR}/src clean
            fi
        fi
    done
}
populateCCACHE() {
    FPPBASEVERSION=$(</etc/fpp/rfs_version)
    FPPPLATFORM=$(cat /etc/fpp/platform 2> /dev/null)
    MAJVER=${FPPBASEVERSION:1:1}
    if [[ ${MAJVER} -eq 2 ]]; then
        MAJVER=${FPPBASEVERSION:1:4}
        MINVER=${FPPBASEVERSION:6:2}
    else
        MINVER=${FPPBASEVERSION:3:2}
        if [[ $MINVER == *"-" ]]; then
            MINVER=${FPPBASEVERSION:3:1}
        fi
    fi
    if  [ "${FPPPLATFORM}" = "Raspberry Pi" ]; then
        PLAT=Pi
    elif [ "${FPPPLATFORM}" = "BeagleBone Black" ]; then
        PLAT=BBB
    elif [ "${FPPPLATFORM}" = "BeagleBone 64" ]; then
        PLAT=BB64
    else
        echo "populateCache stopping, Unknown platform - ${FPPPLATFORM}"
        MAJVER=0
        MINVER=0
    fi
    if [[ ${MAJVER} -gt 3 || ${MAJVER} -eq 3 && ${MINVER} -ge 3 ]]; then
        #at least v3.3
        BRANCH=$(sudo git branch --list | grep \* | colrm 1 2)

        FILETOGET="ccache-${PLAT}-${MAJVER}.x-${BRANCH}.tar.gz"
        FULLURL="https://falconchristmas.github.io/ccache/${FILETOGET}"
        ETAG_GIT="/tmp/etag.$$"
        ETAG_LOCAL="/root/.ccache/etag"
        NEEDS_UPDATED=0

        echo "Checking CCACHE -  $FILETOGET - $FULLURL"

        sudo test -f "$ETAG_LOCAL"
        ETAG_LOCAL_NOTFOUND=$?

        curl -I $FULLURL | grep -i etag > $ETAG_GIT

        ETAG_SIZE=$(wc -c $ETAG_GIT | awk '{print $1}')

        if (($ETAG_SIZE < 5)); then
            echo "Updating CCache -- Invalid etag"
            NEEDS_UPDATED=1
        elif [ "$ETAG_LOCAL_NOTFOUND" == "1" ] ; then
            echo "Updating CCache -- not cached"
            NEEDS_UPDATED=1
        else
            sudo diff -q $ETAG_LOCAL $ETAG_GIT
            rc=$?
            if [ $rc -ne "0" ]; then
                echo "Updating CCache - eTag has changed"
                NEEDS_UPDATED=1
            fi
        fi

        if [ $NEEDS_UPDATED -eq "0" ]; then
            echo "CCache is up to date"
            rm "$ETAG_GIT" # cleanup
            return 0
        fi


        curl  -f --fail-early $FULLURL --output "/tmp/$FILETOGET"

        if [ -f "/tmp/$FILETOGET" ]; then
            sudo cp /root/.ccache/ccache.conf /tmp
            sudo tar -x -z -C /root -f "/tmp/$FILETOGET"
            rm -f "/tmp/$FILETOGET"
            sudo mv $ETAG_GIT $ETAG_LOCAL
            sudo chmod 644 $ETAG_LOCAL
            sudo cp /tmp/ccache.conf /root/.ccache/ccache.conf
        fi
    fi

    # set the CCache sizes/flags that we need to be able to successfully compile
    sudo ccache -M 400M
    sudo ccache --set-config=temporary_dir=/tmp
    sudo ccache --set-config=sloppiness=pch_defines,time_macros,locale
    sudo ccache --set-config=pch_external_checksum=true
    sudo ccache --set-config=hard_link=true
}


function ComputeMakeParallelism() {
    local CPUS=1
    if [ -f "/proc/cpuinfo" ]; then
        CPUS=$(grep "^processor" /proc/cpuinfo | wc -l)

        if [[ ${CPUS} -gt 1 ]]; then
            MEMORY=$(grep MemTot /proc/meminfo | awk '{print $2}')
            if [[ ${MEMORY} -lt 425000 ]]; then
                # very limited memory, only use one core or we'll fail or
                # will be very slow as we constantly swap in/out
                CPUS=1
            elif [[ ${MEMORY} -lt 512000 ]]; then
                ARMV=$(uname -m)
                if [ "$ARMV" = "aarch64" ]; then
                    # 64bit compiles take more memory so if we are less than 512M, 
                    # we need to stick with a single core or it will swap
                    CPUS=1
                else
                    SWAPTOTAL=$(grep SwapTotal /proc/meminfo | awk '{print $2}')
                    # Limited memory, if we have some swap, we'll go ahead with -j 2
                    # otherwise we'll need to stick with -j 1 or we run out of memory
                    if [[ ${SWAPTOTAL} -gt 49000 ]]; then
                        CPUS=2
                    else
                        CPUS=1
                    fi
                fi
            fi
        fi
    else
        CPUS=$(sysctl -n hw.ncpu)
    fi
    echo "$CPUS"
}

compileBinaries() {

    cleanCompiledBinaries
    if [ "${FPPPLATFORM}" != "MacOS" ]; then
        populateCCACHE
    fi

    # export CCACHE_LOGFILE=/tmp/cache.debug
    export LANG=en_US.UTF-8
    export TERM=linux

    CPUS=$(ComputeMakeParallelism)

    # Need to unset HOME so that ccache will user /root instead of /home/fpp
    unset HOME

    if [ "${FPPPLATFORM}" != "MacOS" ]; then
        MEMORY=$(grep MemTot /proc/meminfo | awk '{print $2}')
        FPPDPID=$(pgrep fppd)
        if [ ${MEMORY} -lt 512000 -a "${FPPDPID}" != "" ]; then
            echo "System has less than 512MB RAM, activating swap."
            # Create swapfile in fpp media so it will go onto the 
            # storage location most likely having space on it (not 
            # eMMC on Beagles)
            #
            # some of the larger C++ files are consuming a lot of memory
            # and are starting to cause compile failures on the devices
            # with limitted memory (PiZeros, older Pi's, etc...) so
            # we'll allocate a swap file so it shouldn't fail, but
            # will likely be slow.   We DON'T want an "always" swapfile
            # to avoid killing the SD cards.
            ${SUDO} fallocate -l 256M "${FPPHOME}/media/tmp/swapfile"
            ${SUDO} chmod 600 "${FPPHOME}/media/tmp/swapfile"
            ${SUDO} mkswap -q "${FPPHOME}/media/tmp/swapfile"
            ${SUDO} swapon "${FPPHOME}/media/tmp/swapfile"
        fi
    fi

	if [ "x${FPPDIR}" = "x/opt/fpp" ]
	then
		cd ${FPPDIR}/src && ${SUDO} make clean && ${SUDO} -E make -j ${CPUS} optimized
	else
		cd ${FPPDIR}/src && sudo -u ${FPPUSER} make clean && sudo -u ${FPPUSER} make -j ${CPUS} optimized
	fi

    for p in ${MEDIADIR}/plugins/*; do
        if [ -d "$p" ]; then
            if [ -f "${p}/Makefile" ]; then
                echo "Building plugin $p"
                make -C "${p}" -f "${p}/Makefile" -j ${CPUS} SRCDIR=${FPPDIR}/src
            fi
        fi
    done

    if [ "${FPPPLATFORM}" != "MacOS" ]; then    
        if [ -f "${FPPHOME}/media/tmp/swapfile" ]; then
            #remove the swap that was created
            ${SUDO} swapoff "${FPPHOME}/media/tmp/swapfile"
            ${SUDO} rm -f "${FPPHOME}/media/tmp/swapfile"
        fi
    fi
}

#############################################################################
# Helper script for running the User hook script with a specified hook
runUserHookScript() {
	if [ -f "${MEDIADIR}/scripts/UserCallbackHook.sh" ]
	then
		/bin/bash ${MEDIADIR}/scripts/UserCallbackHook.sh $1
	fi
}

#############################################################################
# Helper scripts for running at boot time
runBootHookScripts() {
	runUserHookScript boot

	/bin/ls -1 ${PLUGINDIR}/*/scripts/boot.sh 2> /dev/null | while read FILE
	do
		echo "Running: ${FILE}"
		/bin/bash ${FILE}
	done
}

#############################################################################
# Helper scripts for running the User and Plugin pre/post start/stop scripts.
# These are normally run from fppd_start and fppd_stop
runPreStartScripts() {
	runUserHookScript preStart

	/bin/ls -1 ${PLUGINDIR}/*/scripts/preStart.sh 2> /dev/null | while read FILE
	do
		echo "Running: ${FILE}"
		/bin/bash ${FILE}
	done
}

runPostStartScripts() {
	/bin/ls -1 ${PLUGINDIR}/*/scripts/postStart.sh 2> /dev/null | while read FILE
	do
		echo "Running: ${FILE}"
		/bin/bash ${FILE}
	done

	runUserHookScript postStart
}

runPreStopScripts() {
	runUserHookScript preStop

	/bin/ls -1 ${PLUGINDIR}/*/scripts/preStop.sh 2> /dev/null | while read FILE
	do
		echo "Running: ${FILE}"
		/bin/bash ${FILE}
	done
}

runPostStopScripts() {
	/bin/ls -1 ${PLUGINDIR}/*/scripts/postStop.sh 2> /dev/null | while read FILE
	do
		echo "Running: ${FILE}"
		/bin/bash ${FILE}
	done

	runUserHookScript postStop
}



#############################################################################
# Check for audio control files
checkAudioConfig() {
	if [ ! -e /root/.libao ]
	then
		cat <<EOF > /root/.libao
dev=default
EOF
	fi
}


#############################################################################
# Handle calling a function directly
#
# Example: /opt/fpp/scripts/functions runPreStartScripts
BASENAME=$(basename -- $0)
if [ "${BASENAME}" = "functions" -a -n "$1" ]
then
    $@
fi

