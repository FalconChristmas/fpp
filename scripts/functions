#!/bin/bash

#############################################################################
# Setup default /etc/network/interfaces and wpa_supplicant.conf files
SetupDefaultNetworkConfig () {
	if [ ! -f "/etc/network/interfaces.default" ]
	then
		cat <<-EOF > /etc/network/interfaces.default
		auto lo
		iface lo inet loopback

		allow-hotplug eth0

		iface eth0 inet dhcp

		iface wlan0 inet dhcp
		  wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf

		iface eth0:0 inet static
		  address 192.168.0.10
		  netmask 255.255.255.0
		  network 192.168.0.0
		EOF
	fi

	cp /etc/network/interfaces.default /etc/network/interfaces

	if [ ! -f "/etc/wpa_supplicant/wpa_supplicant.conf.default" ]
	then
		cat <<-EOF > /etc/wpa_supplicant/wpa_supplicant.conf.default
		ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
		update_config=1
		EOF
	fi

	cp /etc/wpa_supplicant/wpa_supplicant.conf.default /etc/wpa_supplicant/wpa_supplicant.conf

	sed -i '/ NAME="wlan/d' /etc/udev/rules.d/70-persistent-net.rules

	if [ ! -f "/etc/resolv.conf.default" ]
	then
		touch /etc/resolv.conf.default
	fi

	cp /etc/resolv.conf.default /etc/resolv.conf
}

#############################################################################
# netcalc function found online on linuxquestions.org
# http://www.linuxquestions.org/questions/programming-9/bash-cidr-calculator-646701/
netcalc(){
	local IFS='.' ip i
	local -a oct msk

	read -ra oct <<<"$1"
	read -ra msk <<<"$2"

	for i in ${!oct[@]}; do
		ip+=( "$(( oct[i] & msk[i] ))" )
	done

	echo "${ip[*]}"
}

#############################################################################
# Create our version of /etc/network/interfaces and wpa_supplicant.conf files
SetupFPPNetworkConfig () {
	if [ ! -f "${FPPHOME}/media/config/interface.eth0" -a ! -f "${FPPHOME}/media/config/interface.wlan0" ]
	then
		echo "FPP - Using default network config"
		return
	fi

	echo "FPP - Configuring Network"

	TMPFILE="/etc/network/interfaces.FPP"
	INITETH0="no"
	UPWLAN0="no"

	cat <<-EOF > ${TMPFILE}
	auto lo
	iface lo inet loopback

	EOF

	PROTO="dhcp"
	if [ -f "${FPPHOME}/media/config/interface.eth0" ]
	then
		. ${FPPHOME}/media/config/interface.eth0
	fi

	kill -9 $(ps auxw | grep ifplugd | grep -v grep | grep eth0 | awk '{print $2}') > /dev/null 2>&1

	if [ "x${PROTO}" = "xdhcp" ]
	then
		cat <<-EOF >> ${TMPFILE}
		allow-hotplug eth0
		iface eth0 inet dhcp
		EOF
	else
		# Re-initialize eth0 since it is not using DHCP
		INITETH0="yes"

		kill -9 $(ps auxw | grep dhclient | grep -v grep | grep eth0 | awk '{print $2}') > /dev/null 2>&1

		NETWORK=$(netcalc ${ADDRESS} ${NETMASK})

		cat <<-EOF >> ${TMPFILE}
		allow-hotplug eth0
		iface eth0 inet static
		  address ${ADDRESS}
		  netmask ${NETMASK}
		  network ${NETWORK}
		EOF

		if [ "x${GATEWAY}" != "x" ]
		then
			echo "  gateway ${GATEWAY}" >> ${TMPFILE}
		fi
	fi

	echo >> ${TMPFILE}

	if [ -f "${FPPHOME}/media/config/interface.wlan0" ]
	then
		UPWLAN0="yes"

		. ${FPPHOME}/media/config/interface.wlan0

		kill -9 $(ps auxw | grep ifplugd | grep -v grep | grep wlan0 | awk '{print $2}') > /dev/null 2>&1

		if [ "x${PROTO}" = "xdhcp" ]
		then
			cat <<-EOF >> ${TMPFILE}
			allow-hotplug wlan0
			iface wlan0 inet manual
			  wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
			wireless-power off

			iface FPP-wlan0 inet dhcp

			EOF
		else
			NETWORK=$(netcalc ${ADDRESS} ${NETMASK})

			kill -9 $(ps auxw | grep dhclient | grep -v grep | grep wlan0 | awk '{print $2}') > /dev/null 2>&1

			cat <<-EOF >> ${TMPFILE}
			allow-hotplug wlan0
			iface wlan0 inet manual
			  wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
			wireless-power off

			iface FPP-wlan0 inet static
			  address ${ADDRESS}
			  netmask ${NETMASK}
			  network ${NETWORK}
			EOF

			if [ "x${GATEWAY}" != "x" ]
			then
				echo "  gateway ${GATEWAY}" >> ${TMPFILE}
			fi

			echo >> ${TMPFILE}
			echo "iface default inet dhcp" >> ${TMPFILE}
		fi
		echo >> ${TMPFILE}

		cat <<-EOF > /etc/wpa_supplicant/wpa_supplicant.conf.FPP
		ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
		update_config=1

		network={
		  ssid="${SSID}"
		EOF

		if [ "x${PSK}" != "x" ]
		then
			echo "  psk=\"${PSK}\"" >> /etc/wpa_supplicant/wpa_supplicant.conf.FPP
		else
			echo "  key_mgmt=NONE" >> /etc/wpa_supplicant/wpa_supplicant.conf.FPP
		fi

		cat <<-EOF >> /etc/wpa_supplicant/wpa_supplicant.conf.FPP
		  scan_ssid=1
		  id_str="FPP-wlan0"
		}

		EOF

		cp /etc/wpa_supplicant/wpa_supplicant.conf.FPP /etc/wpa_supplicant/wpa_supplicant.conf
	fi

	cat <<-EOF >> ${TMPFILE}
	iface eth0:0 inet static
	  address 192.168.0.10
	  netmask 255.255.255.0
	  network 192.168.0.0
	EOF

	echo >> ${TMPFILE}

	cp ${TMPFILE} /etc/network/interfaces

	if [ "x${INITETH0}" = "xyesXXXX" ]
	then
		echo "FPP - Taking eth0 down"
		ifdown eth0 > /dev/null 2>&1

		echo "FPP - Bringing eth0 back up"
		ifup eth0
	fi

	if [ "x${UPWLAN0}" = "xyesXXXX" ]
	then
		echo "FPP - Taking wlan0 down"
		ifdown wlan0 > /dev/null 2>&1

		#wpa_cli reconfigure > /dev/null 2>&1

		echo "FPP - Bringing wlan0 up"
		ifup wlan0 > /dev/null 2>&1

		# Shouldn't need this since we have "wireless-power off" but leave it
		# in here just in case for now.
		#echo "FPP - Disabling power management on wlan0"
		#iwconfig wlan0 power off > /dev/null 2>&1
	fi

	ENABLEROUTING=$(getSetting EnableRouting)
	if [ "x${ENABLEROUTING}" = "x1" ]
	then
		# Remove all ip_forward lines in case there is an "= 0" line
		sed -i "/Enable Routing/d" /etc/sysctl.conf
		sed -i "/net.ipv4.ip_forward/d" /etc/sysctl.conf

		# Add in a line to enable forwarding
		echo "# Enable Routing" >> /etc/sysctl.conf
		echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
	else
		# Remote any ip_forward line we put in
		sed -i "/Enable Routing/d" /etc/sysctl.conf
		sed -i "/net.ipv4.ip_forward = 1/d" /etc/sysctl.conf
	fi
	sysctl --system
}

#############################################################################
# Configure fallback IP address if necessary
ConfigureFallbackIP() {
	if [ -f "${CFGDIR}/interface.eth0" ]
	then
		. ${CFGDIR}/interface.eth0
		if [ "x${PROTO}" = "xstatic" ]
		then
			return
		fi
	fi

	#####################################################################
	# Don't configure fallback IP if no link is detected
	ethtool eth0 | grep -q "Link detected: yes"
	if [ $? -eq 1 ]
	then
		return
	fi


	ETH0GATEWAY=$(netstat -rn | grep "^0\.0\.0\.0.*eth0$" | awk '{print $2}')
	WLAN0GATEWAY=$(netstat -rn | grep "^0\.0\.0\.0.*wlan0$" | awk '{print $2}')
	WLAN0NETWORK=$(ifconfig wlan0 2> /dev/null | grep "inet addr:" | awk '{print $2}' | cut -f2 -d: | cut -f1-3 -d\.)
	NEEDFALLBACKIP=1
	NEEDFALLBACKGW=1

	if [ ! -z "${ETH0GATEWAY}" ]
	then
		ping -c 1 ${ETH0GATEWAY} > /dev/null 2>&1
		if [ $? -eq 0 ]
		then
			# Have a default gateway on eth0 and it is pingable
			NEEDFALLBACKIP=0
			NEEDFALLBACKGW=0
		fi
	fi

	if [ ! -z "${WLAN0GATEWAY}" ]
	then
		ping -c 1 ${WLAN0GATEWAY} > /dev/null 2>&1
		if [ $? -eq 0 ]
		then
			# Have a default gateway on wlan0 and it is pingable
			NEEDFALLBACKGW=0
		fi
	fi

	if [ ${NEEDFALLBACKIP} -eq 1 ]
	then
		OTHERNET=1
		IP=192.168.0.10
		NETMASK=255.255.255.0
		BROADCAST=192.168.0.255
		GATEWAY=192.168.0.1

		arping -q -c 1 -w 1000000 -I eth0 192.168.1.1 2> /dev/null
		if [ $? -eq 0 ]
		then
			# we're on the 192.168.1.0/24 network
			OTHERNET=0
			IP=192.168.1.10
			NETMASK=255.255.255.0
			BROADCAST=192.168.1.255
			GATEWAY=192.168.1.1
		fi

		FBNETWORK=$(echo ${IP} | cut -f1-3 -d\.)
		if [ "x${WLAN0NETWORK}" = "x${FBNETWORK}" ]
		then
			IP=192.168.${OTHERNET}.10
			NETMASK=255.255.255.0
			BROADCAST=192.168.${OTHERNET}.255
			GATEWAY=192.168.${OTHERNET}.1
		fi
		ifconfig eth0:0 ${IP} netmask ${NETMASK} broadcast ${BROADCAST} up

		if [ ${NEEDFALLBACKGW} -eq 1 ]
		then
			route add default gw ${GATEWAY} eth0:0
		fi
	fi
}

#############################################################################
# Get a list of all interfaces using dhclient to get an IP and
# waits for them to all recieve IPs.  If any interface does not
# have an IP, then the function will sleep for a little while
# and then jump back to the top of the loop to check again.
WaitForDHCPIPs() {
	DHCP_INTERFACES="$(ps auxw | grep "dhclient\.\([a-z0-9]*\)\.pid" | grep -v grep | sed -e 's/.*client\.\([a-z0-9]*\)\.pid.*/\1/' | sort | uniq)"
	SLEEPTIME=2

	if [ -z "${DHCP_INTERFACES}" ]
	then
		return 0
	fi

	echo "Waiting for DHCP to receive IP addresses: '${DHCP_INTERFACES}'"

	# Loop up to 5 times, so max wait time is 5 * ${SLEEPTIME}
	for i in {1..5}
	do
		IP=""
		for INTERFACE in ${DHCP_INTERFACES}
		do
			LINKUP="N/A"
			if [ "x${INTERFACE}" = "xeth0" ]
			then
				LINKUP=$(ethtool eth0 | grep "Link detected: yes")
			fi

			IP=$(ifconfig ${INTERFACE} | grep "inet " | sed -e "s/addr://" | awk '{print $2}')
			if [ -n "${LINKUP}" -a -z "${IP}" ]
			then
				echo "${INTERFACE} does not have an IP, waiting for ${SLEEPTIME} seconds"
				sleep ${SLEEPTIME}
				continue
			fi
		done
		if [ -z "${IP}" ]
		then
			continue
		fi

		break
	done
}

#############################################################################
# Functions for compiling and cleaning up compiled binaries
BINARIES="fppd fpp fppmm"
cleanCompiledBinaries() {
	if [ "x${FPPDIR}" = "x/opt/fpp" ]
	then
		cd ${FPPDIR}/src && ${SUDO} make clean
	else
		cd ${FPPDIR}/src && sudo -u ${FPPUSER} make clean
	fi
}

compileBinaries() {
	cleanCompiledBinaries

	if [ "x${FPPDIR}" = "x/opt/fpp" ]
	then
		cd ${FPPDIR}/src && ${SUDO} make clean && ${SUDO} make
	else
		cd ${FPPDIR}/src && ${SUDO} -u ${FPPUSER} make clean && sudo -u ${FPPUSER} make
	fi

	if [ "x${FPPBINDIR}" != "x${FPPDIR}/src" ]
	then
		# Clean up any installed binaries that are identical to the one in git
		for FILE in ${BINARIES}
		do
			if [ "x${FPPDIR}" = "x/opt/fpp" ]
			then
				${SUDO} strip ${FPPDIR}/src/${FILE}
			else
				${SUDO} -u ${FPPUSER} strip ${FPPDIR}/src/${FILE}
			fi

			BINMD5=$(md5sum ${FPPBINDIR}/${FILE} | awk '{print $1}')
			SRCMD5=$(md5sum ${FPPDIR}/src/${FILE} | awk '{print $1}')
			if [ "${BINMD5}" = "${SRCMD5}" ]
			then
				${SUDO} rm -f ${FPPDIR}/src/${FILE}
			fi
		done
	fi
}

#############################################################################
# Helper script for running the User hook script with a specified hook
runUserHookScript() {
	if [ -f "${FPPHOME}/media/scripts/UserCallbackHook.sh" ]
	then
		/bin/bash ${FPPHOME}/media/scripts/UserCallbackHook.sh $1
	fi
}

#############################################################################
# Helper scripts for running the User and Plugin pre/post start/stop scripts.
# These are normally run from fppd_start and fppd_stop
runPreStartScripts() {
	runUserHookScript preStart

	/bin/ls -1 ${PLUGINDIR}/*/scripts/preStart.sh 2> /dev/null | while read FILE
	do
		echo "Running: ${FILE}"
		/bin/bash ${FILE}
	done
}

runPostStartScripts() {
	/bin/ls -1 ${PLUGINDIR}/*/scripts/postStart.sh 2> /dev/null | while read FILE
	do
		echo "Running: ${FILE}"
		/bin/bash ${FILE}
	done

	runUserHookScript postStart
}

runPreStopScripts() {
	runUserHookScript preStop

	/bin/ls -1 ${PLUGINDIR}/*/scripts/preStop.sh 2> /dev/null | while read FILE
	do
		echo "Running: ${FILE}"
		/bin/bash ${FILE}
	done
}

runPostStopScripts() {
	/bin/ls -1 ${PLUGINDIR}/*/scripts/postStop.sh 2> /dev/null | while read FILE
	do
		echo "Running: ${FILE}"
		/bin/bash ${FILE}
	done

	runUserHookScript postStop
}

#############################################################################
# Update the Avahi daemon service config file for fpp
updateAvahiConfig() {
	TMPFILE="/var/tmp/fpp.service"
	AVAHICFGFILE="/etc/avahi/services/fpp.service"

	fppMode=$(getSetting fppMode)
	platform=$(cat /etc/fpp/platform)

	cat > ${TMPFILE} <<-EOF
		<?xml version="1.0" standalone='no'?><!--*-nxml-*-->
		<!DOCTYPE service-group SYSTEM "avahi-service.dtd">

		<service-group>
		  <name replace-wildcards="yes">%h</name>
		  <service>
		    <type>_fpp-httpd._tcp</type>
		    <port>80</port>
		  </service>
		  <service>
		    <type>_fpp-fppd._udp</type>
		    <port>32320</port>
		    <txt-record>fppMode=${fppMode},platform=${platform}</txt-record>
		  </service>
		</service-group>
		EOF

	cp ${TMPFILE} ${AVAHICFGFILE}
}

#############################################################################
# Start/Stop OLA Daemon
startOLADaemonIfNecessary() {
	# Start OLA daemon if necessary
	cat ${FPPHOME}/media/config/channeloutputs.json 2> /dev/null | tr -d "\r\n" | egrep -q 'OLA",[ 	a-zA-Z0-9:",]*"enabled": 1'
	if [ $? -eq 0 ]
	then
		OLAPID=$(pgrep olad)
		if [ -z "${OLAPID}" ]
		then
			sudo -u ${FPPUSER} olad -f -c ${FPPHOME}/media/config/ola
		fi
	fi
}

stopOLADaemonIfUnused() {
	# Start OLA daemon if necessary
	cat ${FPPHOME}/media/config/channeloutputs.json 2> /dev/null | tr -d "\r\n" | egrep -q 'OLA",[ 	a-zA-Z0-9:",]*"enabled": 1'
	if [ $? -ne 0 ]
	then
		OLAPID=$(pgrep olad)
		if [ -n "${OLAPID}" ]
		then
			killall -9 olad
		fi
	fi
}

#############################################################################
# Configure Channel Outputs
setupChannelOutputs() {

	# Setup BBB device tree
	if [ "${FPPPLATFORM}" = "BeagleBone Black" ]
	then
		cat ${FPPHOME}/media/config/channeloutputs.json 2> /dev/null | tr -d "\r\n" | egrep -q '(LEDPanelMatrix|BBB48String|BBBSerial)",[ 	a-zA-Z0-9:",]*"enabled": 1'
		if [ $? -eq 0 ]
		then
			cp ${FPPDIR}/external/LEDscape/dts/CAPE-BONE-OCTO-00A0.dtbo /lib/firmware/
			echo 'CAPE-BONE-OCTO' > /sys/devices/bone_capemgr.*/slots 2> /dev/null
		fi
	elif [ "${FPPPLATFORM}" = "Raspberry Pi" ]
	then
		# Check for RGBMatrix channel output
		cat ${FPPHOME}/media/config/channeloutputs.json 2> /dev/null | tr -d "\r\n" | egrep -q 'LEDPanelMatrix",[ 	a-zA-Z0-9:",]*"enabled": 1'
		RGBMatrix=$?

		# RPIWS281X and onboard sound are incompatible
		grep -q "^1,RPIWS281X" ${FPPHOME}/media/channeloutputs 2> /dev/null
		RPIWS281X=$?

		if [ ${RGBMatrix} -eq 0 -o ${RPIWS281X} -eq 0 ]
		then
			# Make sure onboard sound is disabled
			grep -q "^snd-bcm2835" /etc/modules 2> /dev/null
			if [ $? -eq 0 ]
			then
				# Disable onboard sound and reboot to take effect
				sed -i "s/^snd-bcm2835/#snd-bcm2835/" /etc/modules
				shutdown -r now
			fi
		else
			# Re-enable onboard sound if it is disabled
			grep -q "snd-bcm2835" /etc/modules 2> /dev/null
			if [ $? -eq 0 ]
			then
				# Check to see if onboard sound is enabled
				grep -q "^snd-bcm2835" /etc/modules 2> /dev/null
				if [ $? -ne 0 ]
				then
					# Re-enable sound
					sed -i "/^#snd-bcm2835/d" /etc/modules
					echo "snd-bcm2835" >> /etc/modules
					modprobe snd-bcm2835
				fi
			fi
		fi

		# Link in desired version of RGBMatrix library
		PINOUT=$(cat ${FPPHOME}/media/config/channeloutputs.json 2> /dev/null | tr -d "\r\n" | sed -e 's/.*LEDPanelMatrix",[      a-zA-Z0-9:",]*"enabled": 1//' -e 's/.*"wiringPinout": "//' -e 's/".*//')
		rm ${FPPDIR}/lib/librgbmatrix.so
		case ${PINOUT} in
			Standard)
				ln -s ${FPPDIR}/lib/librgbmatrix_Standard.so ${FPPDIR}/lib/librgbmatrix.so
				;;
			Classic)
				ln -s ${FPPDIR}/lib/librgbmatrix_Classic.so ${FPPDIR}/lib/librgbmatrix.so
				;;
			Adafruit)
				ln -s ${FPPDIR}/lib/librgbmatrix_Adafruit.so ${FPPDIR}/lib/librgbmatrix.so
				;;
			*)
				ln -s ${FPPDIR}/lib/librgbmatrix_Standard.so ${FPPDIR}/lib/librgbmatrix.so
				;;
		esac
	fi

	startOLADaemonIfNecessary
}

#############################################################################
# Start/Stop the Web Socket Server
startWebSocketServer() {
	/usr/bin/nohup ${SCRIPTDIR}/fppwss > ${LOGDIR}/fppwss.log 2>&1 &
}

stopWebSocketServer() {
	killall -9 fppwss 2> /dev/null
}

#############################################################################
# Detect PiFace
detectPiFace() {
	/usr/local/bin/gpio -p write 207 1
	PIFACEFOUND=$(/usr/local/bin/gpio -p read 215)
	/usr/local/bin/gpio -p write 207 0

	grep -q PiFaceDetected ${CFGFILE}
	if [ $? -eq 0 ]
	then
		sed -i "s/^PiFaceDetected =.*/PiFaceDetected = ${PIFACEFOUND}/" ${CFGFILE}
	else
		echo "PiFaceDetected = ${PIFACEFOUND}" >> ${CFGFILE}
	fi
}

#############################################################################
# Detect Falcon hardware on SPI port
detectFalconHardware() {
	${FPPD} -H > /dev/null 2>&1
	FHWFOUND=$?

	grep -q FalconHardwareDetected ${CFGFILE}
	if [ $? -eq 0 ]
	then
		sed -i "s/^FalconHardwareDetected =.*/FalconHardwareDetected = ${FHWFOUND}/" ${CFGFILE}
	else
		echo "FalconHardwareDetected = ${FHWFOUND}" >> ${CFGFILE}
	fi
}

#############################################################################
# Check for audio control files
checkAudioConfig() {
	if [ ! -e /root/.asoundrc ]
	then
		cat <<EOF > /root/.asoundrc
pcm.!default {
	type hw
	card 0
}

ctl.!default {
	type hw
	card 0
}
EOF
	fi

	if [ ! -e /root/.libao ]
	then
		cat <<EOF > /root/.libao
dev=default
EOF
	fi
}

#############################################################################
# Check local time against U.S. Naval Observatory time, set if too far out
checkTimeAgainstUSNO () {
	# www.usno.navy.mil is not pingable, so check github.com instead
	ping -q -c 1 github.com > /dev/null 2>&1

	if [ $? -eq 0 ]
	then
		echo "FPP: Checking local time against U.S. Naval Observatory"

		# allow clocks to differ by 24 hours to handle time zone differences
		THRESHOLD=86400
		USNOSECS=$(curl -s http://www.usno.navy.mil/cgi-bin/time.pl | sed -e "s/.*\">//" -e "s/<\/t.*//" -e "s/...$//")
		LOCALSECS=$(date +%s)
		MINALLOW=$(expr ${USNOSECS} - ${THRESHOLD})
		MAXALLOW=$(expr ${USNOSECS} + ${THRESHOLD})

		#echo "FPP: USNO Secs  : ${USNOSECS}"
		#echo "FPP: Local Secs : ${LOCALSECS}"
		#echo "FPP: Min Valid  : ${MINALLOW}"
		#echo "FPP: Max Valid  : ${MAXALLOW}"

		echo "FPP: USNO Time  : $(date --date=@${USNOSECS})"
		echo "FPP: Local Time : $(date --date=@${LOCALSECS})"

		if [ ${LOCALSECS} -gt ${MAXALLOW} -o ${LOCALSECS} -lt ${MINALLOW} ]
		then
			echo "FPP: Local Time is not within 24 hours of USNO time, setting to USNO time"
			date $(date --date="@${USNOSECS}" +%m%d%H%M%Y.%S)

			LOCALSECS=$(date +%s)
			echo "FPP: New Local Time: $(date --date=@${LOCALSECS})"
		else
			echo "FPP: Local Time is OK"
		fi
	else
		echo "FPP: Not online, unable to check time against U.S. Naval Observatory."
	fi
}

#############################################################################
# Setup RTC on the Pi.
setupPiRTC () {
	# RTC Setup
	# to get the RPi board version:
	REV=$(cat /proc/cpuinfo|grep Revision)
	# Extract revision
	REV=${REV##*: }
	# Make it readable as hex
	REV=0x$REV
	# Convert hex to dec
	REV=$((REV))

	# Locate The Required Modules

	modprobe i2c-bcm2708
	modprobe i2c-dev

	PCF2127=pcf2127
	if [ "x$(uname -r)" = "x3.10.33+" ]
	then
		PCF2127=pcf2127a
	fi

	modprobe rtc-${PCF2127}
	modprobe rtc-ds1307
	modprobe i2c:mcp7941x

	# Read Clock Setting From Settings File

	piRTC=$(awk -f ${FPPDIR}/scripts/readSetting.awk ${SETTINGSFILE} setting=piRTC)

	remountRootReadWrite

	# Remove PiFace RTC overlay from /boot/config.txt.  If a user
	# is configuring it, the overlay will be re-added shortly
	sed -i '/dtoverlay=i2c-rtc,mcp7941x/d' /boot/config.txt

	case "$piRTC" in
	1)
	  # rasClock chip
	  if [ $REV -lt 4 ]
	  then
		echo "FPP - Configuring RTC, Setting to rasClock/i2c-0"
		echo ${PCF2127} 0x51 > /sys/class/i2c-adapter/i2c-0/new_device
	  else
		echo "FPP - Configuring RTC, Setting to rasClock/i2c-1"
		echo ${PCF2127} 0x51 > /sys/class/i2c-adapter/i2c-1/new_device
	  fi
	  ;;
	2)
	  # DS1307 chip
	  if [ $REV -lt 4 ]
	  then
		echo "FPP - Configuring RTC, Settting to DS1307/i2c-0"
		echo ds1307 0x68 > /sys/class/i2c-adapter/i2c-0/new_device
	  else
		echo "FPP - Configuring RTC, Setting to DS1307/i2c-1"
		echo ds1307 0x68 > /sys/class/i2c-adapter/i2c-1/new_device
	  fi
	  ;;
	3)
	  # PiFace Chip
	  if ! grep -qc dtoverlay=i2c-rtc,mcp7941x /boot/config.txt
		then
		echo "FPP - Configuring RTC, adding PiFace RTC overlay"
		echo 'dtoverlay=i2c-rtc,mcp7941x' >> /boot/config.txt
	  fi
	  ;;
	*)
	  # None
		echo "FPP - Configuring RTC, None Selected"
	  ;;
	esac

	remountRootReadOnlyIfNeeded
}

#############################################################################
# Setup RTC on the BBB
setupBBBRTC () {
	# Read Clock Setting From Settings File

	RTC=$(awk -f ${FPPDIR}/scripts/readSetting.awk ${SETTINGSFILE} setting=piRTC)

	case "$RTC" in
		2)
			# DS1307 chip
			# BBB has onboard clock as rtc0 so we need to use rtc1
			echo ds1307 0x68 > /sys/class/i2c-adapter/i2c-1/new_device
			echo "FPP - Configuring RTC, Setting to DS1307/i2c-1"
			;;
		*)
			# None
			echo "FPP - Configuring RTC, None Selected"
			;;
	esac
}

#############################################################################
# Functions to remount root read-write if read-only and switch back if necessary
remountRootReadWrite() {
	if [ "x${MOUNTSTATE}" = "x" ]
	then
		export MOUNTSTATE=$(mount | grep "on / type" | cut -f2 -d\( | cut -f1 -d,)
	fi

	if [ "x${MOUNTSTATE}" = "xro" ]
	then
		echo "Remounting root filesystem Read-Write"
		sudo mount -o remount,rw /
	fi
}

remountRootReadOnlyIfNeeded() {
	if [ "x${MOUNTSTATE}" = "xro" ]
	then
		echo "Remounting root filesystem Read-Only"
		sudo mount -o remount,ro /
	fi
}

#############################################################################
# Some fixups related to running the v1.x SD image read-only.  These are pure
# hacks for now until we get a new SD image that is designed to be read-only
# from the start.
applyReadOnlySDFixups() {
	if [ "x${MOUNTSTATE}" = "x" ]
	then
		export MOUNTSTATE=$(mount | grep "on / type" | cut -f2 -d\( | cut -f1 -d,)
	fi

	SDVER=$(cat /etc/fpp/rfs_version | cut -f1 -d\.)

	if [ "x${SDVER}" = "xv1" -a "x${MOUNTSTATE}" = "xro" ]
	then
		echo "FPP: Root is mounted read-only on a v1.x SD image, applying read-only fixups."

		# Samba's smbd won't start if it can't write to /var/lib/samba
		cp -rp /var/lib/samba /tmp/
		mkdir /var/log/samba
		mount -o bind /tmp/samba /var/lib/samba
		/etc/init.d/samba restart

		remountRootReadWrite

		# Our startup script can't copy php.ini into place if root is read-only
		cp /opt/fpp/etc/php.ini /etc/
		/etc/init.d/apache2 restart

		remountRootReadOnlyIfNeeded
	fi
}

#############################################################################

