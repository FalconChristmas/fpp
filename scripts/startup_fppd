#!/bin/bash
#
# startup
#
# Called from rc.local to start FPP
#
#

BINDIR=$(cd $(dirname $0) && pwd)

. ${BINDIR}/common
. ${BINDIR}/functions

# Make sure our DHCP IPs are up before we log/announce them.
WaitForDHCPIPs

checkTimeAgainstUSNO

# Configure fallback IP if necessary
ConfigureFallbackIP

# Print/Say the IP address
_IP=$(hostname -I) || true
if [ "$_IP" ]; then
	echo "FPP - Found IP(s): $_IP"

	DISABLEIPANN=$(getSetting disableIPAnnouncement)
	if [ "x${DISABLEIPANN}" != "x1" ]
	then
		arrHost=(${_IP// / })
		FLITESTR="I Have Found The Following I P Addresses, ${arrHost[0]}, ${arrHost[1]},  ${arrHost[2]}"
		if [ "${FPPPLATFORM}" = "BeagleBone Black" ]
		then
			(flite -voice awb -o /var/tmp/flite.wav "${FLITESTR}" && mplayer -ao alsa /var/tmp/flite.wav) &
		else
			flite -voice awb "${FLITESTR}" &
		fi
	fi
else
  echo "FPP - No IP(s) found"
fi

grep -q "^[^#].*${FPPHOME}/media" /etc/fstab
MOUNTMEDIA=$?

while [ ${MOUNTMEDIA} -eq 0 ]
do
if [ "$(df -h ${MEDIADIR} | tail -n 1 | awk '{print $1}')" == "$(df -h / | tail -n 1 | awk '{print $1}')" ];
then
	echo "FPP - Checking for mounted flash drive, Flash Media Is Missing.  Please Insert.";
	flite -voice kal "Boot Stalled, Flash Media Is Missing.  Please Insert."
	sleep 5;
	mount -a;
else
	echo "FPP - Checking for mounted flash drive, Flash Media mounted.";

	break
fi
done

DIRS="config effects events logs music playlists scripts sequences upload videos plugins plugindata exim4"
echo "FPP - Checking for required directories"
for DIR in ${DIRS}
do
	if [ ! -d ${FPPHOME}/media/${DIR} ]
	then
		echo "      Creating ${DIR}"
		mkdir -p ${FPPHOME}/media/${DIR}
		chown ${FPPUSER}.${FPPUSER} ${FPPHOME}/media/${DIR}
	fi
done

# Fixup ownership when mounted on an non-FAT filesystem
chown -R ${FPPUSER}.${FPPUSER} ${FPPHOME}/media

echo "FPP - Copying rsync daemon config files into place and restarting"
sed -e "s#FPPDIR#${FPPDIR}#g" -e "s#FPPHOME#${FPPHOME}#g" -e "s#FPPUSER#${FPPUSER}#g" < ${FPPDIR}/etc/rsync > /etc/default/rsync
sed -e "s#FPPDIR#${FPPDIR}#g" -e "s#FPPHOME#${FPPHOME}#g" -e "s#FPPUSER#${FPPUSER}#g" < ${FPPDIR}/etc/rsyncd.conf > /etc/rsyncd.conf
/etc/init.d/rsync restart

echo "FPP - Copying Apache config into place and restarting Apache"
sed -e "s#FPPDIR#${FPPDIR}#g" -e "s#FPPHOME#${FPPHOME}#g" < ${FPPDIR}/etc/apache2.site > ${SITEFILE}
/etc/init.d/apache2 restart

#echo "FPP - Copying Nginx config into place and restarting Nginx"
#mkdir /var/log/nginx
#chown www-data /var/log/nginx
#sed -e "s#FPPDIR#${FPPDIR}#g" -e "s#FPPHOME#${FPPHOME}#g" < ${FPPDIR}/etc/nginx.conf > /etc/nginx/sites-available/default
#/etc/init.d/nginx restart


echo "FPP - Starting FPP boot script"
${BINDIR}/fpp_boot

if [ "${FPPPLATFORM}" = "Raspberry Pi" ]
then
	PiLCDenabled=$(getSetting PI_LCD_Enabled)

	if [ "x${PiLCDenabled}" = "x1" ]
	then
	  echo "FPP - Checking for configured LCD, LCD Enabled, starting LCD daemon"
	  ${FPPDIR}/scripts/lcd/fppLCD start
	else
	  echo "FPP - Checking for configured LCD, LCD Disabled"
	fi
fi

##############################################################################
# Leave these things till last so user can see output of anything above here
##############################################################################
SCREENSAVER=$(getSetting screensaver)
if [ "x${SCREENSAVER}" = "x1" ]
then
	echo "FPP - Turning ON screen blanking"
	setterm -blank 1
else
	echo "FPP - Turning OFF screen blanking"
	setterm -blank 0
fi

if [ "$_IP" ]; then
  echo "FPP - Found IP(s): $_IP"
fi

