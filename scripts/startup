#!/bin/bash
#
# startup
#
# Called from rc.local to start FPP
#
#

BINDIR=$(cd $(dirname $0) && pwd)

# See if we should be running from /home/pi/fpp
if [ "x${BINDIR}" == "x/opt/fpp/scripts" -a -f "/home/pi/fpp/scripts/startup" ]
then
	exec /home/pi/fpp/scripts/startup
fi

# See if we should be running from /home/fpp/fpp
if [ "x${BINDIR}" == "x/opt/fpp/scripts" -a -f "/home/fpp/fpp/scripts/startup" ]
then
	exec /home/fpp/fpp/scripts/startup
fi

. ${BINDIR}/common
. ${BINDIR}/functions

teeOutput

echo "FPP - Setting up for the Falcon Player on the ${FPPPLATFORM} platform"

checkAudioConfig

if [ "${FPPPLATFORM}" = "BeagleBone Black" ]
then
	# Check fstab for our entries
	grep -q "beaglebone-black-eMMC-flasher.sh" /etc/fstab
	if [ $? -eq 0 ]
	then
		sed -i "/.*beaglebone-black-eMMC-flasher.sh.*/d" /etc/fstab

		cat <<-EOF >> /etc/fstab
#####################################
tmpfs         /var/log    tmpfs   nodev,nosuid,size=10M 0 0
tmpfs         /var/tmp    tmpfs   nodev,nosuid,size=10M 0 0
#####################################
/dev/sda1     /home/fpp/media  auto    defaults,noatime,nodiratime,exec,nofail,flush,uid=500,gid=500  0  0
#####################################
EOF
		mount /var/log
		mount /var/tmp
	fi
fi

SITEFILE="/etc/apache2/sites-enabled/000-default"
NGINX_SITEFILE="/etc/fpp_nginx.conf"

if dpkg --get-selections | grep -qc -e ^apache2\	; then
# If the flash drive is not mounted yet, then fix Apache so it can at least start up
if [ ! -d "${FPPHOME}/media/logs" ]
then
	echo "FPP - Reconfiguring Apache to disable logging since flash is not mounted"
	sed -i -e "s/ErrorLog/#ErrorLog/" ${SITEFILE}
	case "${OSVER}" in
		debian_7)
			/etc/init.d/apache2 restart
			;;
		debian_8)
			systemctl restart apache2.service
			;;
	esac
fi
else
# If the flash drive is not mounted yet, then fix nginx so it can at least start up
if [ ! -d "${FPPHOME}/media/logs" ]
then
	echo "FPP - Reconfiguring nginx to disable logging since flash is not mounted"
	sed -i -e "s/\(\w*\)access_log/\1#access_log/" ${NGINX_SITEFILE}
	sed -i -e "s/\(\w*\)error_log/\1#error_log/" ${NGINX_SITEFILE}
	case "${OSVER}" in
		debian_7)
			/etc/init.d/nginx restart
			;;
		debuan_8)
			systemctl restart nginx.service
			;;
	esac
fi
fi

# Configure Network and DNS
#echo "FPP - Configuring Network"
#${BINDIR}/config_network
SetupFPPNetworkConfig

HOSTNAME=$(getSetting HostName)
if [ "x${HOSTNAME}" != "x" -a "x$(hostname)" != "x${HOSTNAME}" ]
then
	echo "FPP - Setting hostname to ${HOSTNAME}"
	echo ${HOSTNAME} > /etc/hostname
	sed -i '/^127.0.1.1[^0-9]/d' /etc/hosts
	sed -i "\$a127.0.1.1 ${HOSTNAME}" /etc/hosts
	hostname ${HOSTNAME}
	case "${OSVER}" in
		debian_7)
			/etc/init.d/avahi-daemon restart
			;;
		debian_8)
			systemctl restart avahi-daemon.service
			;;
	esac
fi

echo "FPP - Configuring DNS"
${BINDIR}/config_dns

echo "FPP - Configuring Audio"

if [ "${FPPPLATFORM}" = "Raspberry Pi" ]
then
	#######################################################################
	# Part #1 workaround for https://github.com/raspberrypi/linux/issues/570
	# Play some silence while we set the volume so the new value will stick
	aplay /opt/fpp/media/silence_5sec.wav > /dev/null 2>&1 &
	SILENCEPID=$!
	#######################################################################
fi

CARDID=0
if [ -e /root/.asoundrc ]
then
	CARDID=$(sed -n '/card [0-9]*/p' /root/.asoundrc | head -n 1 | awk '{print $2}')
fi

if [ "x" = "y" ]
then
# Let's check that our .asoundrc is as valid as we care about right now
if [ ! -e /proc/asound/card${CARDID} ]; then
	CARDID=$(/bin/ls -1d /proc/asound/card[0-9] | sed -e 's/.*\([0-9]\)$/\1/' | head -1)
	if [ -n ${CARDID} ]
	then
		echo "Configured sound card might not exist, setting to card ID ${CARDID} which does exist."
		sed -i "s/card [0-9]/card $CARDID/" /root/.asoundrc
	else
		CARDID=0
		echo "Configured sound card might not exist, let's set it to 0 as a default."
		sed -i 's/card [0-9]/card 0/' /root/.asoundrc
	fi
fi
else
	AUDIOOUTPUT=$(getSetting AudioOutput)
	if [ "x${AUDIOOUTPUT}" != "x${CARDID}" -a -n "${AUDIOOUTPUT}" ]
	then
		echo "Resetting /root/.asoundrc to use card id ${AUDIOOUTPUT}"
		sed -i "s/card [0-9]/card ${AUDIOOUTPUT}/" /root/.asoundrc
	fi
fi

amixer -c ${CARDID} cset numid=3 1 > /dev/null 2>&1
VOLUME=$(getSetting volume)
if [ "x${VOLUME}" = "x" ]
then
	VOLUME=75
fi

# Pi needs a volume adjustment, in reality a lot of sound cards do, but we
# don't want to put in a lot of special cases here so only handle the Pi
if [ "$CARDID" = "0" ]
then
	# Switch to this more accurate setting for or after v0.3.0
	VOLUME=$(echo "scale=2 ; ${VOLUME} / 2.0 + 50" | bc)
fi

MIXERDEVICE=$(getSetting AudioMixerDevice)
if [ -z ${MIXERDEVICE} ]
then
	MIXERDEVICE=$(amixer -c $card scontrols | head -1 | cut -f2 -d"'")
fi

amixer -c ${CARDID} set ${MIXERDEVICE} ${VOLUME}% > /dev/null 2>&1

if [ "${FPPPLATFORM}" = "Raspberry Pi" ]
then
	#######################################################################
	# Part #2 workaround for https://github.com/raspberrypi/linux/issues/570
	sleep 1
	kill -9 ${SILENCEPID} > /dev/null 2>&1
	#######################################################################
fi

# Clear any restart/reboot flags
echo "FPP - Clearing reboot flags"
sed -i -e "s/^rebootFlag .*/rebootFlag = 0/" ${FPPHOME}/media/settings

echo "FPP - Setting max IGMP memberships"
sysctl net/ipv4/igmp_max_memberships=512 > /dev/null 2>&1

if [ "${FPPPLATFORM}" = "BeagleBone Black" -o "${FPPPLATFORM}" = "Raspberry Pi" ]
then
	# echo "FPP - Configuring RTC"
	${BINDIR}/piRTC
fi

if [ "${FPPPLATFORM}" = "Raspberry Pi" ]
then
	echo "FPP - Setting up SPI"
	/usr/local/bin/gpio load spi 100 &>/dev/null

	# See if we have a PiFace connected
	echo "FPP - Checking for PiFace"
	detectPiFace

	# See if we have any Falcon hardware on the SPI port
	echo "FPP - Checking for Falcon hardware on SPI port"
	detectFalconHardware
fi

# Make sure our DHCP IPs are up before we log/announce them.
WaitForDHCPIPs

checkTimeAgainstUSNO

# Configure fallback IP if necessary
ConfigureFallbackIP

# Print/Say the IP address
_IP=$(hostname -I) || true
if [ "$_IP" ]; then
  echo "FPP - Found IP(s): $_IP"
  arrHost=(${_IP// / })
  FLITESTR="I Have Found The Following I P Addresses, ${arrHost[0]}, ${arrHost[1]},  ${arrHost[2]}"
  if [ "${FPPPLATFORM}" = "BeagleBone Black" ]
  then
    (flite -voice awb -o /var/tmp/flite.wav "${FLITESTR}" && mplayer -ao alsa /var/tmp/flite.wav) &
  else
    flite -voice awb "${FLITESTR}" &
  fi
else
  echo "FPP - No IP(s) found"
fi

grep -q "^[^#].*${FPPHOME}/media" /etc/fstab
MOUNTMEDIA=$?

while [ ${MOUNTMEDIA} -eq 0 ]
do
if [ "$(df -h ${MEDIADIR} | tail -n 1 | awk '{print $1}')" == "$(df -h / | tail -n 1 | awk '{print $1}')" ];
then
	echo "FPP - Checking for mounted flash drive, Flash Media Is Missing.  Please Insert.";
	flite -voice kal "Boot Stalled, Flash Media Is Missing.  Please Insert."
	sleep 5;
	mount -a;
else
	echo "FPP - Checking for mounted flash drive, Flash Media mounted.";

	break
fi
done

DIRS="config effects events logs music playlists scripts sequences upload videos plugins plugindata exim4"
echo "FPP - Checking for required directories"
for DIR in ${DIRS}
do
	if [ ! -d ${FPPHOME}/media/${DIR} ]
	then
		echo "      Creating ${DIR}"
		mkdir -p ${FPPHOME}/media/${DIR}
		chown ${FPPUSER}.${FPPUSER} ${FPPHOME}/media/${DIR}
	fi
done

# Fixup ownership when mounted on an non-FAT filesystem
chown -R ${FPPUSER}.${FPPUSER} ${FPPHOME}/media

echo "FPP - Copying rsync daemon config files into place and restarting"
sed -e "s#FPPDIR#${FPPDIR}#g" -e "s#FPPHOME#${FPPHOME}#g" -e "s#FPPUSER#${FPPUSER}#g" < ${FPPDIR}/etc/rsync > /etc/default/rsync
sed -e "s#FPPDIR#${FPPDIR}#g" -e "s#FPPHOME#${FPPHOME}#g" -e "s#FPPUSER#${FPPUSER}#g" < ${FPPDIR}/etc/rsyncd.conf > /etc/rsyncd.conf
case "${OSVER}" in
	debian_7)
		/etc/init.d/rsync restart
		;;
	debian_8)
		systemct restart rsync.service
		;;
esac

if dpkg --get-selections | grep -qc -e ^apache2\	; then
echo "FPP - Copying Apache config into place and restarting Apache"
sed -e "s#FPPDIR#${FPPDIR}#g" -e "s#FPPHOME#${FPPHOME}#g" < ${FPPDIR}/etc/apache2.site > ${SITEFILE}
case "${OSVER}" in
	debian_7)
		/etc/init.d/apache2 restart
		;;
	debian_8)
		systemctl restart nginx.service
		;;
esac
else
echo "FPP - Copying nginx config into place and restarting nginx"
sed -e "s#FPPDIR#${FPPDIR}#g" -e "s#FPPHOME#${FPPHOME}#g" < ${FPPDIR}/etc/nginx.conf > ${NGINX_SITEFILE}
case "${OSVER}" in
	debian_7)
		/etc/init.d/nginx restart
		;;
	debuan_8)
		systemctl restart nginx.service
		;;
esac
fi

echo "FPP - Starting FPP boot script"
${BINDIR}/fpp_boot

if [ "${FPPPLATFORM}" = "Raspberry Pi" ]
then
	PiLCDenabled=$(getSetting PI_LCD_Enabled)

	if [ "x${PiLCDenabled}" = "x1" ]
	then
	  echo "FPP - Checking for configured LCD, LCD Enabled, starting LCD daemon"
	  ${FPPDIR}/scripts/lcd/fppLCD start
	else
	  echo "FPP - Checking for configured LCD, LCD Disabled"
	fi
fi

##############################################################################
# Leave these things till last so user can see output of anything above here
##############################################################################
SCREENSAVER=$(getSetting screensaver)
if [ "x${SCREENSAVER}" = "x1" ]
then
	echo "FPP - Turning ON screen blanking"
	setterm -blank 1
else
	echo "FPP - Turning OFF screen blanking"
	setterm -blank 0
fi

if [ "$_IP" ]; then
  echo "FPP - Found IP(s): $_IP"
fi

