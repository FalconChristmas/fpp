#!/bin/bash
#
# startup
#
# Called from rc.local to start FPP
#
#

BINDIR=$(cd $(dirname $0) && pwd)

# See if we should be running from /home/pi/fpp
if [ "x${BINDIR}" == "x/opt/fpp/scripts" -a -f "/home/pi/fpp/scripts/startup" ]
then
	exec /home/pi/fpp/scripts/startup
fi

# See if we should be running from /home/fpp/fpp
if [ "x${BINDIR}" == "x/opt/fpp/scripts" -a -f "/home/fpp/fpp/scripts/startup" ]
then
	exec /home/fpp/fpp/scripts/startup
fi

. ${BINDIR}/common
. ${BINDIR}/functions

teeOutput

echo "FPP - Setting up for the Falcon Player on the ${PLATFORM} platform"

SITEFILE="/etc/apache2/sites-enabled/000-default"

# If the flash drive is not mounted yet, then fix Apache so it can at least start up
if [ ! -d "${FPPHOME}/media/logs" ]
then
	echo "FPP - Reconfiguring Apache to disable logging since flash is not mounted"
	sed -i -e "s/ErrorLog/#ErrorLog/" ${SITEFILE}
	/etc/init.d/apache2 restart
fi

# Configure Network and DNS
#echo "FPP - Configuring Network"
#${BINDIR}/config_network
SetupFPPNetworkConfig

HOSTNAME=$(getSetting HostName)
if [ "x${HOSTNAME}" != "x" -a "x$(hostname)" != "x${HOSTNAME}" ]
then
	echo "FPP - Setting hostname to ${HOSTNAME}"
	echo ${HOSTNAME} > /etc/hostname
	hostname ${HOSTNAME}
	/etc/init.d/avahi-daemon restart
fi

echo "FPP - Configuring DNS"
${BINDIR}/config_dns

echo "FPP - Configuring Audio"

if [ "${PLATFORM}" = "Raspberry Pi" ]
then
	#######################################################################
	# Part #1 workaround for https://github.com/raspberrypi/linux/issues/570
	# Play some silence while we set the volume so the new value will stick
	aplay /opt/fpp/media/silence_5sec.wav > /dev/null 2>&1 &
	SILENCEPID=$!
	#######################################################################
fi

amixer cset numid=3 1 > /dev/null 2>&1
ORIGVOLUME=$(getSetting volume)
if [ "x${ORIGVOLUME}" = "x" ]
then
	ORIGVOLUME=75
fi
# Switch to this more accurate setting for or after v0.3.0
VOLUME=$(echo "scale=2 ; ${ORIGVOLUME} / 2.0 + 50" | bc)
amixer set PCM ${VOLUME}% > /dev/null 2>&1

if [ "${PLATFORM}" = "Raspberry Pi" ]
then
	#######################################################################
	# Part #2 workaround for https://github.com/raspberrypi/linux/issues/570
	sleep 1
	kill -9 ${SILENCEPID} > /dev/null 2>&1
	#######################################################################
fi

# Let's check that our .asoundrc is as valid as we care about right now
if [ -e /root/.asoundrc ] && [ ! -e /proc/asound/card$(sed -n '/card [0-9]*/p' /root/.asoundrc | head -n 1 | awk '{print $2}') ]; then
	echo "Configured sound card might not exist, let's set it to 0 as a default."
	sed -i 's/card [0-9]/card 0/' /root/.asoundrc
fi

# Clear any restart/reboot flags
echo "FPP - Clearing reboot flags"
sed -i -e "s/^rebootFlag .*/rebootFlag = 0/" ${FPPHOME}/media/settings

echo "FPP - Setting max IGMP memberships"
sysctl net/ipv4/igmp_max_memberships=150 > /dev/null 2>&1

if [ "${PLATFORM}" = "Raspberry Pi" ]
then
	echo "FPP - Setting up SPI"
	/usr/local/bin/gpio load spi 100 &>/dev/null
	# spidev is no longer a module, so we need to set the
	# buffer size differently for now
	chmod u+w /sys/module/spidev/parameters/bufsiz
	echo 102400 > /sys/module/spidev/parameters/bufsiz

	# echo "FPP - Configuring RTC"
	${BINDIR}/piRTC

	# See if we have a PiFace connected
	echo "FPP - Checking for PiFace"
	detectPiFace

	# See if we have any Falcon hardware on the SPI port
	echo "FPP - Checking for Falcon hardware on SPI port"
	detectFalconHardware
fi

# Make sure our DHCP IPs are up before we log/announce them.
WaitForDHCPIPs

# Configure fallback IP if necessary
ConfigureFallbackIP

# Print/Say the IP address
_IP=$(hostname -I) || true
if [ "$_IP" ]; then
  echo "FPP - Found IP(s): $_IP"
  arrHost=(${_IP// / })
  flite -voice awb "I Have Found The Following I P Addresses, ${arrHost[0]}, ${arrHost[1]},  ${arrHost[2]}" &
fi

grep -q "^[^#].*${FPPHOME}/media" /etc/fstab
MOUNTMEDIA=$?

while [ ${MOUNTMEDIA} -eq 0 ]
do
if [ "$(df -h ${MEDIADIR} | tail -n 1 | awk '{print $1}')" == "$(df -h / | tail -n 1 | awk '{print $1}')" ];
then
	echo "FPP - Checking for mounted flash drive, Flash Media Is Missing.  Please Insert.";
	flite -voice kal "Boot Stalled, Flash Media Is Missing.  Please Insert."
	sleep 5;
	mount -a;
else
	echo "FPP - Checking for mounted flash drive, Flash Media mounted.";

	break
fi
done

DIRS="config effects events logs music playlists scripts sequences upload videos plugins plugindata exim4"
echo "FPP - Checking for required directories"
for DIR in ${DIRS}
do
	if [ ! -d ${FPPHOME}/media/${DIR} ]
	then
		echo "      Creating ${DIR}"
		mkdir -p ${FPPHOME}/media/${DIR}
		chown ${FPPUSER}.${FPPUSER} ${FPPHOME}/media/${DIR}
	fi
done

echo "FPP - Copying Apache config into place and restarting Apache"
sed -e "s#FPPDIR#${FPPDIR}#g" -e "s#FPPHOME#${FPPHOME}#g" < ${FPPDIR}/etc/apache2.site > ${SITEFILE}
/etc/init.d/apache2 restart

echo "FPP - Copying Nginx config into place and restarting Nginx"
mkdir /var/log/nginx
chown www-data /var/log/nginx
sed -e "s#FPPDIR#${FPPDIR}#g" -e "s#FPPHOME#${FPPHOME}#g" < ${FPPDIR}/etc/nginx.conf > /etc/nginx/sites-available/default
# FIXME, start this when ready to switch
#/etc/init.d/nginx restart


echo "FPP - Starting FPP boot script"
${BINDIR}/fpp_boot

if [ "${PLATFORM}" = "Raspberry Pi" ]
then
	PiLCDenabled=$(getSetting PI_LCD_Enabled)

	if [ "x${PiLCDenabled}" = "x1" ]
	then
	  echo "FPP - Checking for configured LCD, LCD Enabled, starting LCD daemon"
	  ${FPPDIR}/scripts/lcd/fppLCD start
	else
	  echo "FPP - Checking for configured LCD, LCD Disabled"
	fi
fi

##############################################################################
# Leave these things till last so user can see output of anything above here
##############################################################################
SCREENSAVER=$(getSetting screensaver)
if [ "x${SCREENSAVER}" = "x1" ]
then
	echo "FPP - Turning ON screen blanking"
	setterm -blank 1
else
	echo "FPP - Turning OFF screen blanking"
	setterm -blank 0
fi
