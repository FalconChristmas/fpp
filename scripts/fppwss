#!/usr/bin/perl
#
#   Falcon Player Web Socket Server daemon
#   Falcon Player project (FPP)
#
#   Copyright (C) 2013-2018 the Falcon Player Developers
#      Initial development by:
#      - David Pitts (dpitts)
#      - Tony Mace (MyKroFt)
#      - Mathew Mrosko (Materdaddy)
#      - Chris Pinkham (CaptainMurdoch)
#      For additional credits and developers, see credits.php.
#
#   The Falcon Player (FPP) is free software; you can redistribute it
#   and/or modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2 of
#   the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, see <http://www.gnu.org/licenses/>.

use FindBin qw/$Bin/;
use lib "$Bin/../lib/perl/";

use threads;
use threads::shared;
use Net::WebSocket::Server;
use JSON;
use Data::Dumper;
use Time::HiRes qw( usleep );
use FPP::MemoryMap;

$SIG{CHLD} = 'IGNORE';
$| = 1;

printf( "fppws v1.0\n" );
my $fppmm = new FPP::MemoryMap;
$fppmm->OpenMaps();
#$fppmm->DumpConfig();

my %blockCache;
my $debug = 0;

MainListener();

$fppmm->CloseMaps();

exit(0);

#############################################################################

sub MainListener {
	Net::WebSocket::Server->new(
		listen => 32321,
		on_connect => sub {
			my ($serv, $conn) = @_;
			$conn->on(
				utf8 => sub {
					my ($conn, $msg) = @_;
					my $data = from_json($msg);
					my $command = $data->{Command};
					printf( "< %s: %s\n", $command, $msg) if ($debug);
					if ($command eq "GetBlockInfo") {
						GetBlockInfo($conn, $data->{BlockName});
					} elsif ($command eq "GetBlockList") {
						GetBlockList($conn);
					} elsif ($command eq "GetBlockData") {
						GetBlockData($conn, $data->{BlockName});
					} elsif ($command eq "SetBlockData") {
						SetBlockData($conn, $data->{BlockName}, $data->{BlockData});
					} elsif ($command eq "SetTestMode") {
						SetTestMode($data->{State});
					} elsif ($command eq "GetTestMode") {
						GetTestMode($conn);
					} elsif ($command eq "SetChannel") {
						SetChannel($data->{Channel}, $data->{Value});
					} elsif ($command eq "SetTestModeColor") {
						SetTestModeColor($data->{RGB});
					} elsif ($command eq "SetBlockState") {
						SetBlockState($data->{BlockName}, $data->{State});
					} elsif ($command eq "SetBlockPixel") {
						SetBlockPixel($data->{BlockName}, $data->{X}, $data->{Y}, $data->{RGB});
					} elsif ($command eq "ClearBlock") {
						ClearBlock($data->{BlockName});
					} elsif ($command eq "SetBlockColor") {
						SetBlockColor($data->{BlockName}, $data->{RGB});
					} elsif ($command eq "GetFontList") {
						GetFontList($conn);
					} elsif ($command eq "TextMessage") {
						TextMessage($conn, $data);
					}
				},
			);
		},
	)->start;
}

#############################################################################
# Generic reply wrapper so we can log it
sub Reply {
	my $conn = shift;
	my $reply = shift;
	my $json = to_json($reply);

	printf( "> %s: %s\n", $reply->{Command}, $json) if ($debug);
	$conn->send_utf8($json);
}
#############################################################################

my %blockCache;
sub GetCachedBlock {
	my $blk = shift || "";
	my $forceRefresh = shift || 0;

	my $blkInfo;
	if (defined($blockCache{$blk}) && !$forceRefresh) {
		$blkInfo = $blockCache{$blk};
	} else {
		$blkInfo = $fppmm->GetBlockInfo($blk);
	}

	return $blkInfo;
}

sub GetBlockList {
	my $conn = shift;
	my $blockList = $fppmm->GetBlockList();
	my %result;
	$result{Command} = "GetBlockList";
	$result{Result} = $blockList;

	Reply($conn, \%result);
}

sub GetBlockInfo {
	my $conn = shift;
	my $blk = shift;
	my %result;
	$result{Command} = "GetBlockInfo";
	$result{BlockName} = $blk;

	my $blkInfo = GetCachedBlock($blk);

	if (defined($blkInfo)) {
		$result{Result} = $blkInfo;
	} else {
		my %blkInfo;
		$blkInfo->{blockName} = "UNKNOWN BLOCK";
		$result{Result} = \%blkInfo;
	}

	Reply($conn, \%result);
}

sub GetBlockData {
	my $conn = shift;
	my $blk = shift;
	my %result;
	$result{Command} = "GetBlockData";
	$result{BlockName} = $blk;

	my $blkInfo = GetCachedBlock($blk);

	my $data = $fppmm->GetBlockData($blkInfo);
	$result{Locked} = $fppmm->IsBlockLocked($blkInfo);
	$result{Result} = $data;

	Reply($conn, \%result);
}

sub SetBlockState {
	my $blk = shift;
	my $state = shift || 0;

	my $blkInfo = GetCachedBlock($blk);
	
	$fppmm->SetBlockState($blkInfo, $state);
}

sub SetChannel {
	my $c = shift;
	my $v = shift;

	$fppmm->SetChannel($c, $v);
}

sub GetTestMode {
	my $conn = shift;
	my %result;
	$result{Command} = "GetTestMode";
	$result{State} = $fppmm->GetTestMode();

	Reply($conn, \%result);
}

sub SetTestMode {
	my $state = shift || 0;

	$fppmm->SetTestMode($state);
}

sub SetTestModeColor {
	my $rgb = shift;

	$fppmm->SetTestModeColor($rgb->[0], $rgb->[1], $rgb->[2]);
}

sub ClearBlock {
	my $blk = shift || "";
	my @colors = ( 0, 0, 0 );

	SetBlockColor($blk, \@colors );
}

sub SetBlockColor {
	my $blk = shift || "";
	my $rgb = shift;
	my $r = $rgb->[0];
	my $g = $rgb->[1];
	my $b = $rgb->[2];

	if ($blk eq "")
	{
		# Missing information, how do we log?
		return;
	}

	my $blkInfo = GetCachedBlock($blk);

	if (!defined($blkInfo)) {
		return;
	}

	$fppmm->SetBlockColor($blkInfo, $r, $g, $b);
}

sub SetBlockPixel {
	my $blk = shift || "";
	my $x = shift;
	my $y = shift;
	my $rgb = shift;
	my $r = $rgb->[0];
	my $g = $rgb->[1];
	my $b = $rgb->[2];

	if (($blk eq "") ||
		($x < 0) ||
		($y < 0) ||
		(!defined($r)) ||
		(!defined($g)) ||
		(!defined($b)))
	{
		# Missing information, how do we log?
		return;
	}

	my $blkInfo = GetCachedBlock($blk);

	if (!defined($blkInfo)) {
		return;
	}

	$fppmm->SetBlockPixel(
		$blkInfo, $x, $y, $r, $g, $b);
}

sub GetFontList {
	my $conn = shift;
	my %result;
	$result{Command} = "GetFontList";
	$result{Result} = $fppmm->GetFontList();

	Reply($conn, \%result);
}

sub TextMessage {
	my $conn = shift;
	my $data = shift;
	my $blk = $data->{BlockName};
	my $msg = $data->{Message};
	my $color = $data->{Color};
	my $fill = $data->{Fill};
	my $font = $data->{Font};
	my $size = $data->{FontSize};
	my $pos = $data->{Position};
	my $dir = $data->{Direction};
	my $pps = $data->{PixelsPerSecond};

	my $blkInfo = GetCachedBlock($blk, 1);

	if (!defined($blkInfo)) {
		return;
	}

	if ($fppmm->IsBlockLocked($blkInfo)) {
		printf( "TextMessage: Warning: Block %s is locked\n", $data->{BlockName});
		for (my $x = 0; $x < 10; $x++) {
			$blkInfo = GetCachedBlock($blk, 1);
			if (!$fppmm->IsBlockLocked($blkInfo)) {
				last;
			}
			usleep(100000);
		}

		if ($fppmm->IsBlockLocked($blkInfo)) {
			printf( "TextMessage: ERROR: Block %s is still locked\n", $data->{BlockName});
			return;
		}
	}

	$fppmm->SetBlockLock($blkInfo, 1);

	my $pid = fork();

	if (!defined $pid) {
		# Error forking
		die "Cannot fork: $!";
	} elsif ($pid == 0) {
		# In Child
		$fppmm->TextMessage($blkInfo, $msg, $color, $fill, $font, $size, $pos, $dir, $pps);
		$fppmm->SetBlockLock($blkInfo, 0);
		exit 0;
	} else {
		# In Parent
		GetBlockData($conn, $blk);
	}

	return;
}

